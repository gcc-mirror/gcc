2025-10-28  Paul-Antoine Arras  <parras@baylibre.com>

	Backported from master:
	2025-10-28  Paul-Antoine Arras  <parras@baylibre.com>

	PR fortran/122439
	* openmp.cc (gfc_resolve_omp_context_selector): Skip selectors that have
	OMP_TRAIT_INVALID.

2025-10-28  Paul-Antoine Arras  <parras@baylibre.com>

	Backported from master:
	2025-10-24  Paul-Antoine Arras  <parras@baylibre.com>

	PR fortran/121452
	* openmp.cc (resolve_omp_do): Allow CONTINUE as end statement of a
	perfectly nested loop.

2025-10-22  Paul-Antoine Arras  <parras@baylibre.com>

	Backported from master:
	2025-10-21  Paul-Antoine Arras  <parras@baylibre.com>

	PR c/120180
	PR fortran/122306
	* gfortran.h (enum gfc_exec_op): Add EXEC_OMP_FIRST_OPENMP_EXEC and
	EXEC_OMP_LAST_OPENMP_EXEC.
	* openmp.cc (gfc_match_omp_context_selector): Remove static. Remove
	checks on score. Add cleanup. Remove checks on trait properties.
	(gfc_match_omp_context_selector_specification): Remove static. Adjust
	calls to gfc_match_omp_context_selector.
	(gfc_match_omp_declare_variant): Adjust call to
	gfc_match_omp_context_selector_specification.
	(match_omp_metadirective): Likewise.
	(icode_code_error_callback): Reject all statements except
	'assume' and 'metadirective'.
	(gfc_resolve_omp_context_selector): New function.
	(resolve_omp_metadirective): Skip metadirectives which context selectors
	can be statically resolved to false. Replace metadirective by its body
	if only 'nothing' remains.
	(gfc_resolve_omp_declare): Call gfc_resolve_omp_context_selector for
	each variant.

2025-06-06  Tobias Burnus  <tburnus@baylibre.com>

	Backported from master:
	2025-06-06  Tobias Burnus  <tburnus@baylibre.com>
		    Sandra Loosemore  <sloosemore@baylibre.com>

	* f95-lang.cc (ATTR_PURE_NOTHROW_LIST): Define.
	* trans-expr.cc (get_builtin_fn): Handle omp_get_num_devices
	and omp_get_intrinsic_device.
	* gfortran.h (gfc_option_t): Add disable_omp_... for them.
	* options.cc (gfc_handle_option): Handle them with
	-fno-builtin-.

2025-05-15  Sandra Loosemore  <sloosemore@baylibre.com>
	    Tobias Burnus  <tburnus@baylibre.com>

	* trans-openmp.cc (gfc_trans_omp_declare_variant): Disallow
	polymorphic and optional arguments with need_device_addr for now, but
	don't reject need_device_addr entirely.

2025-05-15  waffl3x  <waffl3x@baylibre.com>

	PR c++/119659
	PR c++/118859
	PR c++/119601
	PR c++/119602
	PR c++/119775
	* trans-openmp.cc (gfc_trans_omp_declare_variant): Change format of
	"omp declare variant variant args" attribute.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* trans-openmp.cc (gfc_omp_deep_mapping_map): Add new argument for
	vector of newly created iterators.  Push new iterators onto the
	vector.
	(gfc_omp_deep_mapping_comps): Add new argument for vector of new
	iterators.  Pass argument in calls to gfc_omp_deep_mapping_item and
	gfc_omp_deep_mapping_comps.
	(gfc_omp_deep_mapping_item): Add new argument for vector of new
	iterators.  Pass argument in calls to gfc_omp_deep_mapping_map and
	gfc_omp_deep_mapping_comps.
	(gfc_omp_deep_mapping_do): Add new argument for vector of new
	iterators.  Pass argument in calls to gfc_omp_deep_mapping_item.
	(gfc_omp_deep_mapping_cnt): Pass NULL to new argument for
	gfc_omp_deep_mapping_do.
	(gfc_omp_deep_mapping): Add new argument for vector of new
	iterators.  Pass argument in calls to gfc_omp_deep_mapping_do.
	* trans.h (gfc_omp_deep_mapping): Add new argument.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* trans-openmp.cc (gfc_omp_deep_mapping_map): Remove const from ctx
	argument.  Add arguments for iterators and the statement sequence to
	go into the iterator loop.  Add statement sequence to iterator loop
	body.  Generate iterator loop entries for generated maps, insert
	the map decls and sizes into the iterator element arrays, replace
	original decls with the address of the element arrays, and
	sizes/biases with SIZE_INT.
	(gfc_omp_deep_mapping_comps): Remove const from ctx. Add argument for
	iterators.  Pass iterators to calls to gfc_omp_deep_mapping_item and
	gfc_omp_deep_mapping_comps.
	(gfc_omp_deep_mapping_item): Remove const from ctx. Add argument for
	iterators.  Collect generated side-effect statements and pass to
	gfc_omp_deep_mapping_map along with the iterators.  Pass iterators
	to gfc_omp_deep_mapping_comps.
	(gfc_omp_deep_mapping_do): Remove const from ctx.  Pass iterators to
	gfc_omp_deep_mapping_item.
	(gfc_omp_deep_mapping_cnt): Remove const from ctx.
	(gfc_omp_deep_mapping): Likewise.
	* trans.h (gfc_omp_deep_mapping_cnt): Likewise.
	(gfc_omp_deep_mapping): Likewise.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Andrew Stubbs  <ams@baylibre.com>

	* openmp.cc (gfc_omp_instantiate_mapper): Add argument for namespace.
	Apply namespace to new clauses.  Propagate namespace to nested
	mappers.
	(gfc_omp_instantiate_mappers): Pass namespace of clause to clauses
	generated by mappers.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* trans-openmp.cc (gfc_trans_omp_array_section): Use macros for
	accessing iterator elements.
	(handle_iterator): Likewise.
	(gfc_trans_omp_clauses): Likewise.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Disable strided updates
	when iterators are used in the clause.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Andrew Stubbs   <ams@baylibre.com>

	* dump-parse-tree.cc (show_omp_namelist): Add iterator support for
	OMP_LIST_TO and OMP_LIST_FROM.
	* match.cc (gfc_free_namelist): Free namespace for OMP_LIST_TO and
	OMP_LIST_FROM.
	* openmp.cc (gfc_free_omp_clauses): Free namespace for OMP_LIST_TO
	and OMP_LIST_FROM.
	(gfc_match_motion_var_list): Parse 'iterator' modifier.
	(resolve_omp_clauses): Resolve iterators for OMP_LIST_TO and
	OMP_LIST_FROM.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle iterators in
	OMP_LIST_TO and OMP_LIST_FROM clauses.  Add expressions to
	iter_block rather than block.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Andrew Stubbs  <ams@baylibre.com>

	* dump-parse-tree.cc (show_omp_namelist): Add iterator support for
	OMP_LIST_MAP.
	* match.cc (gfc_free_namelist): Free namespace for OMP_LIST_MAP.
	* openmp.cc (gfc_free_omp_clauses): Free namespace in namelist for
	OMP_LIST_MAP.
	(gfc_match_omp_clauses): Parse 'iterator' modifier for 'map' clause.
	(resolve_omp_clauses): Resolve iterators for OMP_LIST_MAP.
	* trans-openmp.cc: Include tree-ssa-loop-niter.h.
	(gfc_trans_omp_array_section): Add iterator argument.  Replace
	instances of iterator variables with the initial value when
	computing biases.
	(gfc_trans_omp_clauses): Handle iterators in OMP_LIST_MAP clauses.
	Add expressions to iter_block rather than block.  Do not apply
	iterators to firstprivate maps.  Pass iterator to
	gfc_trans_omp_array_section.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* trans-openmp.cc (gfc_trans_omp_array_section): Use temporaries only
	when translating OpenACC.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* gfortran.h (struct gfc_omp_namelist): Move udm field into a new
	union u3.
	* match.cc (gfc_free_omp_namelist): Change references to u2.udm to
	u3.udm.
	* module.cc (load_omp_udms): Likewise.
	(write_omp_udm): Likewise.
	* openmp.cc (gfc_match_motion_var_list): Likewise.
	(gfc_match_omp_clauses): Likewise.
	(resolve_omp_clauses): Likewise.
	(gfc_omp_instantiate_mapper): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Likewise.
	(gfc_find_nested_mappers): Likewise.

2025-05-15  Chung-Lin Tang  <cltang@baylibre.com>
	    Sandra Loosemore  <sloosemore@baylibre.com>

	* cpp.cc (cpp_define_builtins): Updated _OPENACC to "201811"
	for OpenACC 2.7.
	* intrinsic.texi (OpenACC Module OPENACC): Adjust version
	references to 2.7 from 2.6.

2025-05-15  Chung-Lin Tang  <cltang@baylibre.com>

	* openmp.cc (oacc_reduction_defined_type_p): New function.
	(resolve_omp_clauses): Adjust OpenACC array reduction error case.
	Adjust OMP_LIST_REDUCTION case. Use oacc_reduction_defined_type_p for
	OpenACC.
	* trans-openmp.cc (gfc_trans_omp_array_reduction_or_udr):
	Add 'stmtblock_t *block', and 'bool openacc' parameters. Add array and
	array section handling for openacc case. Adjust part of function to be
	!openacc only.
	(gfc_trans_omp_reduction_list):
	Add 'stmtblock_t *block', and 'bool openacc' parameters, pass to calls
	to gfc_trans_omp_array_reduction_or_udr.
	(gfc_trans_omp_array_section): Adjust setting of OMP_CLAUSE_SIZE to only
	OMP_CLAUSE_MAP clauses. Adjust calculations of decls and bias to use
	temporary variables instead of tree expression inside clauses.
	(gfc_trans_omp_clauses): Add 'block' and 'openacc' arguments to calls to
	gfc_trans_omp_reduction_list.
	(gfc_trans_omp_do): Pass 'op == EXEC_OACC_LOOP' as 'bool openacc'
	parameter in call to gfc_trans_omp_clauses.

2025-05-15  Chung-Lin Tang  <cltang@baylibre.com>

	* trans-openmp.cc (gfc_trans_omp_array_section):
	Set OMP_CLAUSE_MAP_POINTS_TO_READONLY on pointer clause.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Andrew Stubbs   <ams@baylibre.com>
	    Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Sandra Loosemore  <sloosemore@baylibre.com>

	* openmp.cc (gfc_match_motion_var_list): Add parsing for mapper
	modifier.
	(gfc_match_omp_clauses): Adjust error handling for changes to
	gfc_match_motion_var_list.
	(gfc_omp_instantiate_mapper): Add code argument to get proper
	location for diagnostic.
	(gfc_omp_instantiate_mappers): Adjust for above change.
	* trans-openmp.cc (gfc_trans_omp_clauses): Use correct ref for update
	operations.
	(gfc_trans_omp_target_update): Instantiate mappers.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Sandra Loosemore  <sloosemore@baylibre.com>

	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Handle
	GOMP_MAP_{TO,FROM}_GRID, GOMP_MAP_GRID_{DIM,STRIDE}.
	(gfc_trans_omp_arrayshape_type, gfc_omp_calculate_gcd,
	gfc_desc_to_omp_noncontig_array, gfc_omp_contiguous_update_p): New
	functions.
	(gfc_trans_omp_clauses): Handle noncontiguous to/from clauses for OMP
	"target update" directives.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* gfortran.h (gfc_omp_namelist_udm): Add MAPPER_ID field to store the
	mapper name to use for lookup during resolution.
	* match.cc (gfc_free_omp_namelist): Handle OMP_LIST_TO and
	OMP_LIST_FROM when freeing mapper references.
	* module.cc (load_omp_udms, write_omp_udm): Handle MAPPER_ID field.
	* openmp.cc (gfc_match_omp_clauses): Handle explicitly-specified
	'default' name.  Don't do mapper lookup here, but record mapper name if
	the user specifies one.
	(resolve_omp_clauses): Do mapper lookup here instead.  Report error for
	missing named mapper.

2025-05-15  Sandra Loosemore  <sloosemore@baylibre.com>

	* gfortran.h (gfc_omp_instantiate_mappers): Adjust declaration
	to return an error status instead of void.
	* openmp.cc (gfc_gomp_instantiate_mappers): Likewise for the
	the definition.
	* trans-openmp.cc (gfc_trans_omp_target): Check return status of
	call to gfc_omp_instantiate_mappers and insert an error_mark_node
	on failure instead of continuing normal processing of the construct.
	(gfc_trans_omp_target_data): Likewise.
	(gfc_trans_omp_target_enter_data): Likewise.
	(gfc_trans_omp_target_exit_data): Likewise.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* gfortran.h (gfc_omp_clauses): Add NS field.
	* openmp.cc (verify_omp_clauses_symbol_dups,
	omp_verify_map_motion_clauses): New functions, broken out of...
	(resolve_omp_clauses): Here.  Record namespace containing clauses.
	Call above functions.
	(resolve_omp_mapper_clauses): New function, using helper functions
	broken out above.
	(gfc_resolve_omp_directive): Add NS parameter to resolve_omp_clauses
	calls.
	(gfc_omp_instantiate_mappers): Call resolve_omp_mapper_clauses if we
	instantiate any mappers.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* gfortran.h (toc_directive): Move here.
	(gfc_omp_instantiate_mappers, gfc_get_location): Add prototypes.
	* openmp.cc (omp_split_map_op, omp_join_map_op, omp_map_decayed_kind,
	omp_basic_map_kind_name, gfc_subst_replace, gfc_subst_prepend_ref,
	gfc_subst_in_expr_1, gfc_subst_in_expr, gfc_subst_mapper_var): Move
	here.
	(gfc_omp_instantiate_mapper, gfc_omp_instantiate_mappers): Move here
	and rename.
	* trans-openmp.cc (toc_directive, omp_split_map_op, omp_join_map_op,
	omp_map_decayed_kind, gfc_subst_replace, gfc_subst_prepend_ref,
	gfc_subst_in_expr_1, gfc_subst_in_expr, gfc_subst_mapper_var,
	gfc_trans_omp_instantiate_mapper, gfc_trans_omp_instantiate_mappers):
	Remove from here.
	(gfc_trans_omp_target, gfc_trans_omp_target_data,
	gfc_trans_omp_target_enter_data, gfc_trans_omp_target_exit_data):
	Rename calls to gfc_omp_instantiate_mappers.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (omp_split_map_op, omp_join_map_op,
	omp_map_decayed_kind): New functions.
	(gfc_trans_omp_instantiate_mapper): Add CD parameter.  Implement map
	kind decay.
	(gfc_trans_omp_instantiate_mappers): Add CD parameter.  Pass to above
	function.
	(gfc_trans_omp_target_data): Instantiate mappers for 'omp target data'.
	(gfc_trans_omp_target_enter_data): Instantiate mappers for 'omp target
	enter data'.
	(gfc_trans_omp_target_exit_data): Instantiate mappers for 'omp target
	exit data'.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* dump-parse-tree.cc (show_attr): Show omp_udm_artificial_var flag.
	(show_omp_namelist): Support OMP_MAP_POINTER_ONLY and OMP_MAP_UNSET.
	* f95-lang.cc (LANG_HOOKS_OMP_FINISH_MAPPER_CLAUSES,
	LANG_HOOKS_OMP_EXTRACT_MAPPER_DIRECTIVE,
	LANG_HOOKS_OMP_MAP_ARRAY_SECTION): Define language hooks.
	* gfortran.h (gfc_statement): Add ST_OMP_DECLARE_MAPPER.
	(symbol_attribute): Add omp_udm_artificial_var attribute.
	(gfc_omp_map_op): Add OMP_MAP_POINTER_ONLY and OMP_MAP_UNSET.
	(gfc_omp_namelist): Add udm pointer to u2 union.
	(gfc_omp_udm): New struct.
	(gfc_omp_namelist_udm): New struct.
	(gfc_symtree): Add omp_udm pointer.
	(gfc_namespace): Add omp_udm_root symtree. Add omp_udm_ns flag.
	(gfc_free_omp_namelist): Update prototype.
	(gfc_free_omp_udm, gfc_omp_udm_find, gfc_find_omp_udm,
	gfc_resolve_omp_udms): Add prototypes.
	* match.cc (gfc_free_omp_namelist): Change FREE_NS and FREE_ALIGN
	parameters to LIST number, to handle freeing user-defined mapper
	namelists safely.
	* match.h (gfc_match_omp_declare_mapper): Add prototype.
	* module.cc (ab_attribute): Add AB_OMP_DECLARE_MAPPER_VAR.
	(attr_bits): Add OMP_DECLARE_MAPPER_VAR.
	(mio_symbol_attribute): Read/write AB_OMP_DECLARE_MAPPER_VAR attribute.
	Set referenced attr on read.
	(omp_map_clause_ops, omp_map_cardinality): New arrays.
	(load_omp_udms, check_omp_declare_mappers): New functions.
	(read_module): Load and check OMP declare mappers.
	(write_omp_udm, write_omp_udms): New functions.
	(write_module): Write OMP declare mappers.
	* openmp.cc (gfc_free_omp_clauses, gfc_match_omp_variable_list,
	gfc_match_omp_to_link, gfc_match_omp_depend_sink,
	gfc_match_omp_clause_reduction): Update calls to gfc_free_omp_namelist.
	(gfc_free_omp_udm, gfc_find_omp_udm, gfc_omp_udm_find,
	gfc_match_omp_declare_mapper): New functions.
	(gfc_match_omp_clauses): Add DEFAULT_MAP_OP parameter. Update calls to
	gfc_free_omp_namelist.  Add declare mapper support.
	(resolve_omp_clauses): Add declare mapper support.  Update calls to
	gfc_free_omp_namelist.
	(gfc_resolve_omp_udm, gfc_resolve_omp_udms): New functions.
	* parse.cc (decode_omp_directive): Add declare mapper support.
	(case_omp_decl): Add ST_OMP_DECLARE_MAPPER case.
	(gfc_ascii_statement): Add ST_OMP_DECLARE_MAPPER case.
	* resolve.cc (resolve_types): Call gfc_resolve_omp_udms.
	* st.cc (gfc_free_statement): Update call to gfc_free_omp_namelist.
	* symbol.cc (free_omp_udm_tree): New function.
	(gfc_free_namespace): Call above.
	* trans-decl.cc (omp_declare_mapper_ns): New global.
	(gfc_finish_var_decl, gfc_generate_function_code): Support declare
	mappers.
	(gfc_trans_deferred_vars): Ignore artificial declare-mapper vars.
	* trans-openmp.cc (tree-iterator.h): Include.
	(toc_directive): New enum.
	(gfc_trans_omp_array_section): Change OP and OPENMP parameters to
	toc_directive CD ('clause directive').
	(gfc_omp_finish_mapper_clauses, gfc_omp_extract_mapper_directive,
	gfc_omp_map_array_section): New functions.
	(omp_clause_directive): New enum.
	(gfc_trans_omp_clauses): Remove DECLARE_SIMD and OPENACC parameters.
	Replace with toc_directive CD, defaulting to TOC_OPENMP.  Add declare
	mapper support and OMP_MAP_POINTER_ONLY support.
	(gfc_trans_omp_construct, gfc_trans_oacc_executable_directive,
	gfc_trans_oacc_combined_directive): Update calls to
	gfc_trans_omp_clauses.
	(gfc_subst_replace, gfc_subst_prepend_ref): New variables.
	(gfc_subst_in_expr_1, gfc_subst_in_expr, gfc_subst_mapper_var,
	gfc_trans_omp_instantiate_mapper, gfc_trans_omp_instantiate_mappers,
	gfc_record_mapper_bindings_code_fn, gfc_record_mapper_bindings_expr_fn,
	gfc_find_nested_mappers, gfc_record_mapper_bindings): New functions.
	(gfc_typespec * hash traits): New template.
	(omp_declare_mapper_ns): Extern declaration.
	(gfc_trans_omp_target): Call gfc_trans_omp_instantiate_mappers and
	gfc_record_mapper_bindings. Update calls to gfc_trans_omp_clauses.
	(gfc_trans_omp_declare_simd, gfc_trans_omp_declare_variant): Update
	calls to gfc_trans_omp_clauses.
	(gfc_trans_omp_mapper_name, gfc_trans_omp_declare_mapper,
	gfc_trans_omp_declare_mappers): New functions.
	* trans-stmt.h (gfc_trans_omp_declare_mappers): Add prototype.
	* trans.h (gfc_omp_finish_mapper_clauses,
	gfc_omp_extract_mapper_directive, gfc_omp_map_array_section): Add
	prototypes.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* parse.cc (tree.h, fold-const.h, tree-hash-traits.h): Add includes
	(for additions to omp-general.h).

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Treat implicitly-mapped
	assumed-size arrays as zero-sized for OpenACC, rather than an error.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Paul-Antoine Arras  <parras@baylibre.com>
	    Sandra Loosemore  <sandra@baylibre.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Handle "declare create" for
	scalar allocatable variables.
	(gfc_trans_omp_clauses): Don't include allocatable vars in synthetic
	"acc data" region created for "declare create" variables.  Mark such
	variables with the "oacc declare create" attribute instead.  Don't
	create ALWAYS_POINTER mapping for target-to-host updates of declare
	create variables.
	(gfc_trans_oacc_declare): Handle empty clause list.

2025-05-15  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Apply to OpenMP target update.

2025-05-15  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (gfc_conv_array_initializer): Set PURPOSE
	when building constructor for get_initialized_tmp_var.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle uses_allocators.
	* types.def (BT_FN_VOID_PTRMODE, BT_FN_PTRMODE_PTRMODE_INT_PTR): Add.

2025-05-15  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown   <julian@codesourcery.com>
	    Kwok Cheung Yeung   <kcy@codesourcery.com>
	    Tobias Burnus  <tobias@codesourcery.com>
	    Thomas Schwinge  <thomas@codesourcery.com>
	    Paul-Antoine Arras  <parras@baylibre.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.cc (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.cc (find_module_oacc_declare_clauses): Relax
	oacc_declare_create to OMP_MAP_ALLOC, and oacc_declare_copyin to
	OMP_MAP_TO, in order to	match OpenACC 2.5 semantics.
	* trans-openmp.cc (gfc_omp_check_optional_argument): Handle non-decl
	case.
	(gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER (for update
	directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.cc (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Kwok Cheung Yeung   <kcy@codesourcery.com>

	* trans-openmp.cc (gfc_omp_clause_copy_ctor): Permit reductions.

2025-05-15  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris   <jnorris@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>
	    Tobias Burnus  <tobias@codesourcery.com>
	    Thomas Schwinge  <tschwinge@baylibre.com>

	* openmp.cc (gfc_match_omp_map_clause): Re-write handling of the
	deviceptr clause.  Add new common_blocks argument.  Propagate it to
	gfc_match_omp_variable_list.
	(gfc_match_omp_clauses): Update calls to gfc_match_omp_map_clauses.
	(resolve_positive_int_expr): Promote the warning to an error.
	(check_array_not_assumed): Remove pointer check.
	(resolve_oacc_nested_loops): Error on do concurrent loops.
	* trans-openmp.cc (gfc_omp_finish_clause): Don't create pointer data
	mappings for deviceptr clauses.
	(gfc_trans_omp_clauses): Likewise.

2025-05-15  Chung-Lin Tang  <cltang@codesourcery.com>
	    Kwok Cheung Yeung  <kcy@codesourcery.com>
	    Paul-Antoine Arras  <parras@baylibre.com>

	PR other/76739
	* f95-lang.cc (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
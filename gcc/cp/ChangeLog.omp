2025-10-28  Paul-Antoine Arras  <parras@baylibre.com>

	Backported from master:
	2025-10-27  Paul-Antoine Arras  <parras@baylibre.com>

	PR c++/122378
	* parser.cc (cp_parser_label_declaration): Mangle label declaration in a
	metadirective region.

2025-10-22  Paul-Antoine Arras  <parras@baylibre.com>

	Backported from master:
	2025-10-21  Paul-Antoine Arras  <parras@baylibre.com>

	PR c/120180
	PR fortran/122306
	* parser.cc (cp_parser_omp_metadirective): Return early if only one
	selector matches and it resolves to 'omp nothing'.
	(cp_parser_omp_error): Reject 'error at(execution)' in intervening code.
	(cp_parser_pragma): Accept a subset of non-executable OpenMP directives
	as intervening code.

2025-06-05  Sandra Loosemore  <sloosemore@baylibre.com>

	Backported from master:
	2025-06-02  Sandra Loosemore  <sloosemore@baylibre.com>

	* cp-tree.h (maybe_convert_cond): Declare.
	* parser.cc (cp_parser_omp_context_selector): Call
	maybe_convert_cond and fold_build_cleanup_point_expr on the
	expression for OMP_TRAIT_PROPERTY_BOOL_EXPR.
	* pt.cc (tsubst_omp_context_selector): Likewise.
	* semantics.cc (maybe_convert_cond): Remove static declaration.

2025-05-15  Sandra Loosemore  <sloosemore@baylibre.com>
	    Tobias Burnus  <tburnus@baylibre.com>

	* parser.cc (cp_finish_omp_declare_variant): Adjust error messages.

2025-05-15  waffl3x  <waffl3x@baylibre.com>

	PR c++/119659
	PR c++/118859
	PR c++/119601
	PR c++/119602
	PR c++/119775
	PR c++/119659
	PR c++/118859
	PR c++/119601
	PR c++/119602
	PR c++/119775
	* cp-tree.h (finish_omp_parm_list): New declaration.
	(finish_omp_adjust_args): New declaration.
	* decl.cc (omp_declare_variant_finalize_one): Refactor and change
	attribute unpacking, use finish_omp_parm_list and
	finish_omp_adjust_args, refactor append_args diagnostics, add
	nbase_parms to append_args attribute, remove special handling for
	member functions.
	* parser.cc (cp_parser_direct_declarator): Don't pass parms.
	(cp_parser_late_return_type_opt): Remove parms parameter.
	(cp_parser_omp_parm_list): New function.
	(cp_finish_omp_declare_variant): Remove parms parameter.
	Add NULL_TREE instead of nbase_args to append_args_tree.  Refactor,
	use cp_parser_omp_parm_list not cp_parser_omp_var_list_no_open,
	handle "need_device_addr" and remove handling and diagnostics of
	parm list arguments that are done too early.  Change format of
	unnamed variant attribute.
	(cp_parser_late_parsing_omp_declare_simd): Remove parms parameter.
	* pt.cc (tsubst_attribute): Copy "omp declare variant base" nodes,
	substitute parm list numeric range bounds.
	* semantics.cc (finish_omp_parm_list): New function.
	(finish_omp_adjust_args): New function.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Andrew Stubbs  <ams@baylibre.com>

	* parser.cc (cp_parser_omp_clause_map): Apply iterator to push and
	pop mapper clauses.
	* semantics.cc (cxx_omp_map_array_section): Allow array types for
	base type of array sections.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* parser.cc (cp_parser_omp_iterators): Use macros for accessing
	iterator elements.
	(cp_parser_omp_clause_affinity): Likewise.
	(cp_parser_omp_clause_depend): Likewise.
	(cp_parser_omp_clause_from_to): Likewise.
	(cp_parser_omp_clause_map): Likewise.
	* semantics.cc (cp_omp_finish_iterators): Likewise.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* semantics.cc (handle_omp_array_sections): Add extra argument.  Set
	argument to true if array section has a stride that is not one.
	(finish_omp_clauses): Disable strided updates when iterators are
	used in the clause.  Emit sorry if strided.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* parser.cc (cp_parser_omp_clause_from_to): Parse 'iterator' modifier.
	* semantics.cc (finish_omp_clauses): Finish iterators for to/from
	clauses.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Andrew Stubbs  <ams@baylibre.com>

	* parser.cc (cp_parser_omp_clause_map): Parse 'iterator' modifier.
	* semantics.cc (finish_omp_clauses): Finish iterators.  Apply
	iterators to generated clauses.

2025-05-15  Kwok Cheung Yeung  <kcyeung@baylibre.com>

	* pt.cc (tsubst_omp_clause_decl): Use OMP_ITERATOR_DECL_P.
	* semantics.cc (handle_omp_array_sections): Likewise.
	(finish_omp_clauses): Likewise.

2025-05-15  Chung-Lin Tang  <cltang@baylibre.com>

	* parser.cc (cp_parser_omp_var_list_no_open): Adjust parsing of opening
	square bracket.
	(cp_parser_omp_clause_reduction): Adjustments for
	OpenACC-specific cases.
	* semantics.cc (cp_oacc_reduction_defined_type_p): New function.
	(cp_oacc_reduction_code_name): Likewise.
	(finish_omp_reduction_clause): Handle OpenACC cases using new
	functions.

2025-05-15  Sandra Loosemore  <sloosemore@baylibre.com>
	    Julian Brown  <julian@codesourcery.com>
	    waffl3x  <waffl3x@baylibre.com>

	* cp-tree.h (struct cp_omp_declare_variant_attr): New.
	(struct saved_scope): Add omp_declare_variant_attribute field.
	* decl.cc (omp_declare_variant_finalize_one): Add logic to inject
	"this" parameter for method calls.
	* parser.cc (cp_parser_skip_to_pragma_omp_end_declare_variant): New.
	(omp_start_variant_function): New.
	(omp_finish_variant_function): New.
	(cp_parser_init_declarator): Handle variant functions.
	(cp_parser_class_specifier): Handle deferred lookup of base functions
	when the entire class has been seen.
	(cp_parser_member_declaration): Handle variant functions.
	(cp_finish_omp_declare_variant): Merge context selectors if in
	a "begin declare variant" block.
	(cp_parser_omp_begin): Match "omp begin declare variant".  Adjust
	error messages.
	(cp_parser_omp_end): Match "omp end declare variant".
	* parser.h (struct cp_parser): Add omp_unregistered_variants field.
	* semantics.cc (finish_translation_unit): Detect unmatched
	"omp begin declare variant".

2025-05-15  waffl3x  <waffl3x@baylibre.com>
	    Tobias Burnus  <tobias@codesourcery.com>

	* constexpr.cc (potential_constant_expression_1): Handle
	OMP_ALLOCATE.
	* cp-tree.def (OMP_ALLOCATE): New tree code.
	* cp-tree.h (OMP_ALLOCATE_LOCATION): Define.
	(OMP_ALLOCATE_VARS): Define.
	(OMP_ALLOCATE_ALLOCATOR): Define.
	(OMP_ALLOCATE_ALIGN): Define.
	(finish_omp_allocate): New function declaration.
	* decl.cc (make_rtl_for_nonlocal_decl): Work around ICE with
	implicit constexpr functions.
	* parser.cc (cp_parser_omp_allocate): Use OMP_CLAUSE_ERROR,
	add diagnostics for args, call finish_omp_allocate.
	(cp_parser_omp_construct): Don't handle PRAGMA_OMP_ALLOCATE.
	(cp_parser_pragma): Comment.
	* pt.cc (tsubst_stmt): Handle OMP_ALLOCATE, call
	finish_omp_allocate.
	* semantics.cc (finish_omp_allocate): New function.
	* typeck.cc (can_do_nrvo_p): Don't do NRVO for omp allocate vars.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Andrew Stubbs   <ams@baylibre.com>
	    Kwok Cheung Yeung  <kcyeung@baylibre.com>
	    Sandra Loosemore  <sloosemore@baylibre.com>

	* parser.cc (cp_parser_omp_var_list_no_open): Support array-shaping
	operator in 'declare mapper' definitions.
	(cp_parser_omp_clause_from_to): Add parsing for mapper modifier.
	(cp_parser_omp_clause_map): Pass C_ORT_OMP_DECLARE_MAPPER to
	cp_parser_omp_var_list_no_open in mapper definitions.
	(cp_parser_omp_target_update): Instantiate mappers.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* cp-objcp-common.cc (cp_common_init_ts): Add array-shape cast
	support.
	* cp-tree.def (OMP_ARRAYSHAPE_CAST_EXPR): Add tree code.
	* cp-tree.h (DECLTYPE_FOR_OMP_ARRAYSHAPE_CAST): Add flag.
	(cp_omp_create_arrayshape_type, cp_build_omp_arrayshape_cast): Add
	prototypes.
	(grok_omp_array_section, build_omp_array_section): Add stride
	parameters.
	* decl.cc (create_anon_array_type): New function.
	(cp_omp_create_arrayshape_type): New function.
	* decl2.cc (grok_omp_array_section): Add stride parameter.
	(min_vis_expr_r): Add OMP_ARRAYSHAPE_CAST_EXPR support.
	* error.cc (dump_expr): Add stride support for OMP_ARRAY_SECTION.
	* mangle.cc (write_expression): Add OMP_ARRAYSHAPE_CAST_EXPR support.
	* operators.def (OMP_ARRAYSHAPE_CAST_EXPR): Add.
	* parser.cc (cp_parser_new): Initialise omp_array_shaping_op_p and
	omp_has_array_shape_p fields.
	(cp_parser_statement_expr): Don't allow array shaping op in statement
	exprs.
	(cp_parser_postfix_open_square_expression): Add stride parsing for
	array sections.  Use array section code to represent array refs if we
	have an array-shaping operator.
	(cp_parser_parenthesized_expression_list): Don't allow array-shaping
	op here.
	(cp_parser_cast_expression): Add array-shaping operator parsing.
	(cp_parser_lambda_expression): Don't allow array-shaping op in lambda
	body.
	(cp_parser_braced_list): Don't allow array-shaping op in braced list.
	(struct omp_dim): Add stride field.
	(cp_parser_var_list_no_open): Add stride/array shape support.
	(cp_parser_omp_target_update): Handle noncontiguous updates.
	* parser.h (cp_parser): Add omp_array_shaping_op_p and
	omp_has_array_shape_p fields.
	* pt.cc (tsubst): Add array-shape cast support.
	(tsubst_copy, tsubst_copy_and_build): Likewise. Add stride support for
	OMP_ARRAY_SECTION.
	(tsubst_omp_clause_decl): Add stride support for OMP_ARRAY_SECTION.
	* semantics.cc (handle_omp_array_sections_1): Add DISCONTIGUOUS
	parameter and stride support.
	(omp_array_section_low_bound): New function.
	(handle_omp_array_sections): Add DISCONTIGUOUS parameter and stride
	support.
	(finish_omp_clauses): Update calls to handle_omp_array_sections, and
	add noncontiguous array update support.
	(cp_build_omp_arrayshape_cast): New function.
	* typeck.cc (structural_comptypes): Add array-shape cast support.
	(build_omp_array_section): Add stride parameter.
	(check_for_casting_away_constness): Add OMP_ARRAYSHAPE_CAST_EXPR
	support.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* semantics.cc (handle_omp_array_sections): Pass pointer to clause
	instead of clause.  Add PNEXT return parameter for next clause in list
	to process.
	(finish_omp_clauses): Update calls to handle_omp_array_sections.
	Handle cases where initial clause might be replaced.

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* parser.cc (cp_parser_omp_target_data): Instantiate mappers for 'omp
	target data'.
	(cp_parser_omp_target_enter_data): Instantiate mappers for 'omp target
	enter data'.
	(cp_parser_omp_target_exit_data): Instantiate mappers for 'omp target
	exit data'.
	(cp_parser_omp_target): Add c_omp_region_type argument to
	c_omp_instantiate_mappers call.
	* pt.cc (tsubst_omp_clauses): Instantiate mappers for OMP regions other
	than just C_ORT_OMP_TARGET.
	(tsubst_expr): Update call to tsubst_omp_clauses for OMP_TARGET_UPDATE,
	OMP_TARGET_ENTER_DATA, OMP_TARGET_EXIT_DATA stanza.
	* semantics.cc (cxx_omp_map_array_section): Avoid calling
	build_array_ref for non-array/non-pointer bases (error reported
	already).

2025-05-15  Julian Brown  <julian@codesourcery.com>

	* constexpr.cc (reduced_constant_expression_p): Add OMP_DECLARE_MAPPER
	case.
	(cxx_eval_constant_expression, potential_constant_expression_1):
	Likewise.
	* cp-gimplify.cc (cxx_omp_finish_mapper_clauses): New function.
	* cp-objcp-common.h (LANG_HOOKS_OMP_FINISH_MAPPER_CLAUSES,
	LANG_HOOKS_OMP_MAPPER_LOOKUP, LANG_HOOKS_OMP_EXTRACT_MAPPER_DIRECTIVE,
	LANG_HOOKS_OMP_MAP_ARRAY_SECTION): Define langhooks.
	* cp-tree.h (lang_decl_base): Add omp_declare_mapper_p field.  Recount
	spare bits comment.
	(DECL_OMP_DECLARE_MAPPER_P): New macro.
	(omp_mapper_id): Add prototype.
	(cp_check_omp_declare_mapper): Add prototype.
	(omp_instantiate_mappers): Add prototype.
	(cxx_omp_finish_mapper_clauses): Add prototype.
	(cxx_omp_mapper_lookup): Add prototype.
	(cxx_omp_extract_mapper_directive): Add prototype.
	(cxx_omp_map_array_section): Add prototype.
	* decl.cc (check_initializer): Add OpenMP declare mapper support.
	(cp_finish_decl): Set DECL_INITIAL for OpenMP declare mapper var decls
	as appropriate.
	* decl2.cc (mark_used): Instantiate OpenMP "declare mapper" magic var
	decls.
	* error.cc (dump_omp_declare_mapper): New function.
	(dump_simple_decl): Use above.
	* parser.cc (cp_parser_omp_clause_map): Add KIND parameter.  Support
	"mapper" modifier.
	(cp_parser_omp_all_clauses): Add KIND argument to
	cp_parser_omp_clause_map call.
	(cp_parser_omp_target): Call omp_instantiate_mappers before
	finish_omp_clauses.
	(cp_parser_omp_declare_mapper): New function.
	(cp_parser_omp_declare): Add "declare mapper" support.
	* pt.cc (tsubst_decl): Adjust name of "declare mapper" magic var decls
	once we know their type.
	(tsubst_omp_clauses): Call omp_instantiate_mappers before
	finish_omp_clauses, for target regions.
	(tsubst_expr): Support OMP_DECLARE_MAPPER nodes.
	(instantiate_decl): Instantiate initialiser (i.e definition) for OpenMP
	declare mappers.
	* semantics.cc (gimplify.h): Include.
	(omp_mapper_id, omp_mapper_lookup, omp_extract_mapper_directive,
	cxx_omp_map_array_section, cp_check_omp_declare_mapper): New functions.
	(finish_omp_clauses): Delete GOMP_MAP_PUSH_MAPPER_NAME and
	GOMP_MAP_POP_MAPPER_NAME artificial clauses.
	(omp_target_walk_data): Add MAPPERS field.
	(finish_omp_target_clauses_r): Scan for uses of struct/union/class type
	variables.
	(finish_omp_target_clauses): Create artificial mapper binding clauses
	for used structs/unions/classes in offload region.

2025-05-15  Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_uses_allocators): New.
	(cp_parser_omp_clause_name, cp_parser_omp_all_clauses,
	OMP_TARGET_CLAUSE_MASK): Handle uses_allocators.
	* semantics.cc (finish_omp_clauses): Likewise.

2025-05-15  Chung-Lin Tang  <cltang@codesourcery.com>
	    Paul-Antoine Arras  <parras@baylibre.com>

	* semantics.cc (finish_omp_clauses): Adjust to allow duplicate
	mapped variables for OpenMP.

2025-05-15  Julian Brown  <julian@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Kwok Cheung Yeung   <kcy@codesourcery.com>

	* parser.cc (cp_parser_omp_var_list_no_open):  New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(cp_parser_omp_var_list): Add c_omp_region_type argument. Update call
	to cp_parser_omp_var_list_no_open.
	(cp_parser_oacc_data_clause): Update call to
	cp_parser_omp_var_list_no_open.
	(cp_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to cp_parser_omp_var_list_no_open.
	(cp_parser_omp_clause_from_to): Update call to
	cp_parser_omp_clause_var_list_no_open.
	(cp_parser_omp_clause_map): Likewise.
	(cp_parser_omp_clause_init): Likewise.
	(cp_parser_oacc_all_clauses): Update call to
	cp_parser_omp_clause_reduction.
	(cp_parser_omp_all_clauses): Likewise.
	* semantics.cc (finish_omp_reduction_clause): Add c_omp_region_type
	argument.  Suppress user-defined reduction error for OpenACC.
	(finish_omp_clauses): Update call to finish_omp_reduction_clause.

2025-05-15  Chung-Lin Tang  <cltang@codesourcery.com>
	    Kwok Cheung Yeung  <kcy@codesourcery.com>
	    Paul-Antoine Arras  <parras@baylibre.com>

	PR other/76739
	* semantics.cc (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.  Reject
	non-DECL base-pointer cases as unsupported.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.
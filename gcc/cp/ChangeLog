2025-08-08  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2025-08-04  Patrick Palka  <ppalka@redhat.com>

	PR c++/120620
	* constexpr.cc (cxx_dynamic_cast_fn_p): Return true only
	for synthesized __dynamic_cast.

2025-07-03  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-07-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/120940
	* typeck.cc (cp_build_array_ref): Fix a pasto.

2025-07-03  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-07-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/120471
	* typeck.cc (cp_build_array_ref) <case COND_EXPR>: If idx is not
	INTEGER_CST, don't optimize the case (but cp_default_conversion on
	array early if it has ARRAY_TYPE) or use
	SAVE_EXPR <op0>, SAVE_EXPR <idx>, SAVE_EXPR <op0> as new op0 depending
	on flag_strong_eval_order and whether op1 and op2 are arrays with
	invariant address or tree invariant pointers.  Formatting fixes.

2025-06-05  Jason Merrill  <jason@redhat.com>

	PR c++/120123
	* lambda.cc (nonlambda_method_basetype): Look through lambdas
	even when current_class_ref is null.

2025-06-05  Release Manager

	* GCC 13.4.0 released.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-06-25  Patrick Palka  <ppalka@redhat.com>

	PR c++/115358
	* decl2.cc (mark_used): Call maybe_instantiate_decl for an array
	variable with unknown bound.
	* semantics.cc (finish_decltype_type): Remove now redundant
	handling of array variables with unknown bound.
	* typeck.cc (cxx_sizeof_expr): Likewise.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117792
	* pt.cc (type_dependent_expression_p): Consider the dependence
	of the address of each template argument of a function
	template-id.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2025-03-18  Patrick Palka  <ppalka@redhat.com>

	PR c++/119233
	* pt.cc (mark_template_arguments_used): Also handle member
	function pointers.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-06-28  Patrick Palka  <ppalka@redhat.com>

	PR c++/106760
	* call.cc (add_candidates): Relax test for adding a candidate
	to 'bad_cands' to also accept an uninstantiated template candidate
	that has no missing conversions.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-07-23  Patrick Palka  <ppalka@redhat.com>

	PR c++/115656
	* constraint.cc (weakly_subsumes): Pass in_decl=tmpl to
	get_normalized_constraints_from_info.  Rename to ...
	(ttp_subsumes): ... this.
	* cp-tree.h (weakly_subsumes): Rename to ...
	(ttp_subsumes): ... this.
	* pt.cc (is_compatible_template_arg): Adjust after renaming.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-09-12  Patrick Palka  <ppalka@redhat.com>

	PR c++/116418
	* tree.cc (strip_typedefs_expr) <case STATEMENT_LIST>: Replace
	this error path with ...
	<case STMT_EXPR>: ... this, returning the original tree.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/118060
	* constraint.cc (tsubst_valid_expression_requirement): Don't
	check convert_to_void during partial substitution.

2025-05-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-08-15  Patrick Palka  <ppalka@redhat.com>

	PR c++/116320
	* semantics.cc (check_accessibility_of_qualified_id): Try
	currently_open_class when using the object type as the
	effective qualifying type.

2025-05-26  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-02-28  Jakub Jelinek  <jakub@redhat.com>
		    Patrick Palka  <ppalka@redhat.com>

	PR c++/113976
	* decl.cc (grokdeclarator): Don't call cp_apply_type_quals_to_decl
	on DECL_TEMPLATE_INSTANTIATED VAR_DECLs.

2025-05-26  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-09-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/116636
	* method.cc: Include decl.h.
	(use_thunk): Temporarily change deprecated_state to
	UNAVAILABLE_DEPRECATED_SUPPRESS.

2025-05-26  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-09-05  Marek Polacek  <polacek@redhat.com>

	PR c++/116606
	* decl2.cc (mark_vtable_entries): Temporarily override deprecated_state to
	UNAVAILABLE_DEPRECATED_SUPPRESS.  Remove a warning_sentinel.

2025-05-26  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2025-04-16  Jason Merrill  <jason@redhat.com>

	PR c++/116954
	* contracts.cc (remove_contract_attributes): Preserve flags
	on the attribute list.

2025-05-07  Richard Biener  <rguenther@suse.de>

	Backported from master:
	2025-02-03  Richard Biener  <rguenther@suse.de>

	PR c++/79786
	* rtti.cc (emit_tinfo_decl): Fix DATA_ABI_ALIGNMENT invocation.

2025-04-23  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2025-04-16  Jason Merrill  <jason@redhat.com>

	PR c++/114772
	PR c++/101180
	* pt.cc (apply_late_template_attributes): Also override
	target_option_current_node.

2025-04-23  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2025-04-15  Jason Merrill  <jason@redhat.com>

	PR c++/111075
	* constexpr.cc (cxx_eval_call_expression): Allow trivial
	call from a thunk.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-03-06  Jakub Jelinek  <jakub@redhat.com>

	PR c++/98533
	PR c++/119123
	* parser.cc (cp_parser_class_specifier): Update TYPE_FIELDS of
	variant types in case cp_parser_late_parsing_default_args etc. change
	TYPE_FIELDS on the main variant.  Add switch_to_class lambda and
	use it to simplify repeated class switching code.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-02-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/119045
	* constexpr.cc (cxx_eval_store_expression) <case REALPART_EXPR>:
	Assert that refs->is_empty () rather than probe == target.
	(cxx_eval_store_expression) <case IMAGPART_EXPR>: Likewise.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118763
	* init.cc (build_new_1): Don't set CLEANUP_EH_ONLY.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118661
	* constexpr.cc (potential_constant_expression_1): Don't diagnose
	lvalue-to-rvalue conversion of volatile lvalue if it has NULLPTR_TYPE.
	* decl2.cc (decl_maybe_constant_var_p): Return true for constexpr
	decls with NULLPTR_TYPE even if they are volatile.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-01-25  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117827
	* init.cc (build_new_1): Pass address of a make_tree_vector ()
	initialized gc tree vector to build_vec_init and append
	build_disable_temp_cleanup to init_expr from it.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118509
	* typeck.cc (get_member_function_from_ptrfunc): Wrap force_target_expr
	with save_expr.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2025-01-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117825
	* typeck.cc (cp_build_function_call_vec): Don't call
	check_function_arguments if complain doesn't have tf_warning bit set.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-12-17  Jakub Jelinek  <jakub@redhat.com>

	PR c++/116108
	* decl.cc (grokdeclarator): Pass TYYPE_MAIN_VARIANT (type)
	rather than type to same_type_p when checking if the non-static
	data member doesn't have current class type.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-11-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117317
	* semantics.cc (emit_associated_thunks): Do nothing for
	!DECL_INTERFACE_KNOWN && DECL_DEFER_OUTPUT fns.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-10-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117259
	* typeck.cc (get_member_function_from_ptrfunc): Use force_target_expr
	rather than save_expr for instance_ptr and function.  Don't call it
	for TREE_CONSTANT.

2025-04-23  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-09-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/116678
	* optimize.cc: Include decl.h.
	(maybe_thunk_body): Temporarily change deprecated_state to
	UNAVAILABLE_DEPRECATED_SUPPRESS.

2025-04-14  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2025-03-25  Simon Martin  <simon@nasilyan.com>

	PR c++/114525
	* typeck2.cc (build_m_component_ref): Call cp_build_addr_expr
	instead of build_address.

2025-03-25  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2025-03-06  Simon Martin  <simon@nasilyan.com>

	PR c++/117504
	* call.cc (perform_implicit_conversion_flags): Don't call
	mark_{l,r}value_use.

2025-03-24  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2024-09-14  Simon Martin  <simon@nasilyan.com>

	PR c++/116681
	* name-lookup.cc (qualified_namespace_lookup): Use an
	auto_cond_timer instead of using timevar_start and timevar_stop.

2025-03-21  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2025-03-20  Simon Martin  <simon@nasilyan.com>

	PR c++/114292
	* tree.cc (cp_walk_subtrees): Walk the type of DECL_EXPR
	declarations, as well as the TYPE_{MIN,MAX}_VALUE of
	INTEGER_TYPEs for template declarations.

2025-03-18  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2025-03-18  Marek Polacek  <polacek@redhat.com>

	PR c++/118104
	* pt.cc (use_pack_expansion_extra_args_p): Remove an assert.

2025-03-12  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2025-03-12  Marek Polacek  <polacek@redhat.com>

	PR c++/119134
	* pt.cc (check_for_bare_parameter_packs): Check DECL_CONTEXT.

2025-01-29  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2025-01-14  Marek Polacek  <polacek@redhat.com>

	PR c++/118047
	PR c++/118355
	* typeck2.cc (massage_init_elt): Call fold_non_dependent_init
	unless for a CONSTRUCTOR in a template.

2025-01-24  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2025-01-24  Marek Polacek  <polacek@redhat.com>

	PR c++/117153
	* decl2.cc (build_anon_union_vars): Use FIELD for the second operand
	of a COMPONENT_REF.

2025-01-19  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2025-01-17  Simon Martin  <simon@nasilyan.com>

	PR c++/118255
	* name-lookup.cc (pushdecl): Don't call check_template_shadow
	for hidden bindings.

2025-01-17  Nathaniel Shead  <nathanieloshead@gmail.com>

	Backported from master:
	2025-01-17  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118147
	* parser.cc (cp_parser_cache_defarg): Don't error when
	CPP_PRAGMA_EOL.

2025-01-17  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2025-01-16  Simon Martin  <simon@nasilyan.com>

	PR c++/117775
	* decl.cc (fold_sizeof_expr): Make sure the folded result has
	type size_type_node.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	PR c++/110031
	* pt.cc (lookup_and_finish_template_variable): Pass complain to
	mark_used.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	PR c++/114349
	* name-lookup.cc (maybe_push_to_top_level): For a non-lambda,
	don't push to top level if decl_function_context is non-null.
	* pt.cc (maybe_instantiate_noexcept): Use maybe_push_to_top_level.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-05-15  Marek Polacek  <polacek@redhat.com>

	PR c++/114854
	* call.cc (convert_like_internal) <case ck_user>: Don't set
	TARGET_EXPR_DIRECT_INIT_P.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-04-12  Marek Polacek  <polacek@redhat.com>

	PR c++/109966
	* typeck2.cc (potential_prvalue_result_of): Remove.
	(replace_placeholders_for_class_temp_r): Check TARGET_EXPR_ELIDING_P.
	Use a pset.  Don't replace_placeholders in TARGET_EXPRs that initialize
	a function argument.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-09-30  Marek Polacek  <polacek@redhat.com>

	PR c++/109859
	* parser.cc (cp_parser_lambda_declarator_opt): Temporarily clear
	local_variables_forbidden_p.
	(cp_parser_placeholder_type_specifier): Turn an assert into an
	error.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-05-10  Marek Polacek  <polacek@redhat.com>

	PR c++/109680
	* method.cc (build_trait_object): New.
	(assignable_expr): Use it.
	(ref_xes_from_temporary): Likewise.
	(is_convertible_helper): Likewise.  Check FUNC_OR_METHOD_TYPE_P.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-12-17  Marek Polacek  <polacek@redhat.com>

	PR c++/117985
	* init.cc (build_vec_init): Pop CLEANUP_FLAGS if we're not
	generating the loop.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-02-17  Marek Polacek  <polacek@redhat.com>

	PR c++/113158
	* search.cc (maybe_check_overriding_exception_spec): Defer checking
	when a noexcept couldn't be instantiated & evaluated to false/true.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-04-05  Marek Polacek  <polacek@redhat.com>

	PR c++/111132
	* constexpr.cc (get_function_named_in_call): Use
	cp_get_fndecl_from_callee.
	* cvt.cc (cp_get_fndecl_from_callee): If there's a
	DECL_LOCAL_DECL_ALIAS, use it.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-09-10  Marek Polacek  <polacek@redhat.com>

	PR c++/116369
	* call.cc (set_up_extended_ref_temp): Don't mark a temporary
	TREE_READONLY if its type is TYPE_HAS_MUTABLE_P.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-07-25  Marek Polacek  <polacek@redhat.com>

	PR c++/110382
	* constexpr.cc (cxx_eval_array_reference): Create a new constructor
	only when we don't already have a matching one.  Clear the object
	when the type is non-scalar.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-08-19  Marek Polacek  <polacek@redhat.com>

	PR c++/115657
	* decl.cc (build_enumerator): Call maybe_fold_non_dependent_expr
	instead of fold_non_dependent_expr.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-07-20  Marek Polacek  <polacek@redhat.com>

	PR c++/110114
	* call.cc (implicit_conversion_1): Return early if the type isn't
	complete.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-07-18  Marek Polacek  <polacek@redhat.com>

	PR c++/115476
	* semantics.cc (finish_trait_expr)
	<case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS>: Move below to call
	check_trait_type with kind==2.

2024-12-13  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-08-28  Marek Polacek  <polacek@redhat.com>

	PR c++/116424
	* typeck2.cc (process_init_constructor_record): Move the clearing of
	TARGET_EXPR_ELIDING_P down.

2024-12-05  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2024-12-04  Simon Martin  <simon@nasilyan.com>

	PR c++/117615
	* constexpr.cc (cxx_eval_constant_expression): Don't reject
	INTEGER_CSTs with type POINTER_TYPE to METHOD_TYPE.

2024-11-21  Marek Polacek  <polacek@redhat.com>

	PR c++/116731
	* parser.cc (warn_for_range_copy): Check if TYPE is trivially
	constructible, not copyable.

2024-11-06  Simon Martin  <simon@nasilyan.com>

	Backported from master:
	2024-11-05  Simon Martin  <simon@nasilyan.com>

	PR c++/117158
	* typeck.cc (cp_build_array_ref): Only wrap array expression
	into a SAVE_EXPR at template instantiation time.

2024-09-17  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-09-17  Marek Polacek  <polacek@redhat.com>

	PR c++/116676
	* constexpr.cc (maybe_warn_about_constant_value): Check DECL_NAME.

2024-09-13  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-09-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/116449
	* typeck.cc (get_member_function_from_ptrfunc): Use save_expr
	on instance_ptr and function even if it doesn't have side-effects,
	as long as it isn't a decl.

2024-08-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/113063
	PR c++/116289
	* method.cc (synthesize_method): Use cp_evaluated.

2024-06-17  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-06-17  Jakub Jelinek  <jakub@redhat.com>

	PR target/111343
	PR c++/115511
	* typeck.cc (cp_compare_floating_point_conversion_ranks): If an
	extended floating point type mv1 has same set of values as more
	than one standard floating point type and mv2 is float, return 2.

2024-05-24  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2023-09-22  Jason Merrill  <jason@redhat.com>

	PR c++/111529
	* parser.cc (cp_parser_lambda_declarator_opt): Don't suggest
	-std=c++14 for lambda templates.
	* pt.cc (tsubst_expr): Move ANNOTATE_EXPR handling...
	(tsubst_copy_and_build): ...here.

2024-05-24  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-01-25  Jason Merrill  <jason@redhat.com>

	PR c++/113598
	* init.cc (build_vec_init): Don't use {} for PMF.

2024-05-21  Jonathan Wakely  <jwakely@redhat.com>

	Backported from master:
	2024-05-21  Jonathan Wakely  <jwakely@redhat.com>

	PR libstdc++/107800
	* cxxapi-data.csv <to_address>: Change dialect to cxx20.
	* std-name-hint.gperf: Regenerate.
	* std-name-hint.h: Regenerate.

2024-05-21  Release Manager

	* GCC 13.3.0 released.

2024-05-14  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-04-11  Patrick Palka  <ppalka@redhat.com>

	PR c++/114303
	* constraint.cc (tsubst_requires_expr): Clear
	REQUIRES_EXPR_EXTRA_ARGS before calling build_extra_args.
	* pt.cc (tree_extra_args): Define.
	(extract_locals_r): Assert *_EXTRA_ARGS is empty.
	(tsubst_stmt) <case IF_STMT>: Clear IF_SCOPE on the new
	IF_STMT.  Call build_extra_args on the new IF_STMT instead
	of t which might already have IF_STMT_EXTRA_ARGS.

2024-05-13  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-04-24  Patrick Palka  <ppalka@redhat.com>

	PR c++/114709
	* constexpr.cc (cxx_fold_indirect_ref): Restrict object/offset
	canonicalization to RECORD_TYPE member accesses.

2024-05-09  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-04-25  Jakub Jelinek  <jakub@redhat.com>

	PR c++/111284
	* constexpr.cc (cxx_bind_parameters_in_call): For PARM_DECLs with
	TREE_ADDRESSABLE types use vc_glvalue rather than vc_prvalue for
	cxx_eval_constant_expression and if it doesn't have the same
	type as it should, cast the reference type to reference to type
	before convert_from_reference and instead of adjust_temp_type
	take address of the arg, cast to reference to type and then
	convert_from_reference.
	(cxx_eval_constant_expression) <case PARM_DECL>: For lval case
	on parameters with TREE_ADDRESSABLE types lookup result in
	ctx->globals if possible.  Otherwise if lookup in ctx->globals
	was successful for parameter with TREE_ADDRESSABLE type,
	recurse with vc_prvalue on the returned value.

2024-05-07  Andrew Pinski  <quic_apinski@quicinc.com>

	Backported from master:
	2024-05-07  Andrew Pinski  <quic_apinski@quicinc.com>

	PR c++/89224
	* constexpr.cc (cxx_eval_array_reference): Compare main variants
	for the vector/array types instead of the types directly.

2024-05-01  Patrick Palka  <ppalka@redhat.com>

	PR c++/113141
	* call.cc (reference_binding): Remove badness criteria sanity
	check in the recursive case.

2024-05-01  centurion  <centurion009@proton.me>

	Backported from master:
	2024-04-04  centurion  <centurion009@proton.me>

	PR c++/114377
	* pt.cc (find_template_parameter_info::found): Use TREE_TYPE for
	TEMPLATE_DECL instead of DECL_INITIAL.

2024-05-01  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-04-02  Jason Merrill  <jason@redhat.com>

	PR c++/114561
	PR c++/114562
	* call.cc (convert_like_internal): Avoid adding qualification
	conversion in direct reference binding.

2024-05-01  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-03-28  Jason Merrill  <jason@redhat.com>

	PR c++/100667
	* semantics.cc (same_type_ref_bind_p): New.
	(finish_trait_expr): Use it.

2024-04-21  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-04-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/114691
	* semantics.cc (simplify_loop_decl_cond): Use cp_build_unary_op with
	TRUTH_NOT_EXPR on ANNOTATE_EXPR argument (if any) rather than
	ANNOTATE_EXPR itself.

2024-04-21  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-04-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/114580
	* semantics.cc (finish_if_stmt_cond): Call
	maybe_warn_for_constant_evaluated with IF_STMT_CONSTEXPR_P (if_stmt)
	as the second argument, rather than true/false depending on if
	it is if constexpr with non-dependent constant expression with
	bool type.

2024-04-21  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2024-04-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/114572
	* cp-gimplify.cc (cxx_omp_clause_apply_fn): Call build_cplus_new
	on build_call_a result if it has class type.

2024-04-15  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-02-19  Patrick Palka  <ppalka@redhat.com>

	PR c++/113966
	* constraint.cc (tsubst_compound_requirement): Don't check
	the noexcept condition or the return-type-requirement when
	partially substituting.

2024-04-15  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/110006
	PR c++/112769
	* constraint.cc (subst_info::quiet): Accomodate non-diagnostic
	tsubst flags.
	(tsubst_valid_expression_requirement): Likewise.
	(tsubst_simple_requirement): Return a substituted _REQ node when
	processing_template_decl.
	(tsubst_type_requirement_1): Accomodate non-diagnostic tsubst
	flags.
	(tsubst_type_requirement): Return a substituted _REQ node when
	processing_template_decl.
	(tsubst_compound_requirement): Likewise.  Accomodate non-diagnostic
	tsubst flags.
	(tsubst_nested_requirement): Likewise.
	(tsubst_requires_expr): Don't defer partial substitution when
	processing_constraint_expression_p is true, in which case return
	a substituted REQUIRES_EXPR.
	* pt.cc (tsubst_expr) <case REQUIRES_EXPR>: Accomodate
	non-diagnostic tsubst flags.

2024-04-02  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-04-02  Marek Polacek  <polacek@redhat.com>

	PR c++/103825
	* typeck.cc (is_bitfield_expr_with_lowered_type): Handle
	CLEANUP_POINT_EXPR.

2024-02-16  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-02-12  Marek Polacek  <polacek@redhat.com>

	PR c++/113545
	* constexpr.cc (cxx_eval_switch_expr): If the condition doesn't reduce
	to an INTEGER_CST, consider it non-constant.

2024-02-13  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-13  Jason Merrill  <jason@redhat.com>

	PR c++/113612
	* pt.cc (process_partial_specialization): Return early
	on redeclaration.

2024-02-09  Alexandre Oliva  <oliva@adacore.com>

	Backported from master:
	2023-11-29  Alexandre Oliva  <oliva@adacore.com>

	* decl.cc (maybe_prepare_return_this): Split out of...
	(maybe_return_this): ... this.
	* cp-tree.h (maybe_prepare_return_this): Declare.
	* class.cc (build_clone): Call it.

2024-02-09  Alexandre Oliva  <oliva@adacore.com>

	Backported from master:
	2023-11-29  Alexandre Oliva  <oliva@adacore.com>

	* contracts.cc (check_postcondition_result): Cope with
	cdtor_return_this.

2024-02-06  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-06  Jason Merrill  <jason@redhat.com>

	PR c++/107291
	* method.cc (early_check_defaulted_comparison): Fail if not friend.

2024-02-05  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-05  Jason Merrill  <jason@redhat.com>

	PR c++/111286
	* tree.cc (rvalue): Don't drop cv-quals from an array.

2024-02-02  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-02  Jason Merrill  <jason@redhat.com>

	PR c++/110084
	* pt.cc (tsubst_function_decl): Only check a function defaulted
	outside the class if the class is complete.

2024-02-02  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-02  Jason Merrill  <jason@redhat.com>

	PR c++/113638
	* cp-tree.h: Adjust comment.
	* pt.cc (instantiate_template): Set VAR_HAD_UNKNOWN_BOUND for
	variable template.

2024-02-02  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2024-02-02  Jason Merrill  <jason@redhat.com>

	PR c++/112439
	* constexpr.cc (cxx_eval_store_expression): Check empty_base
	before marking a CONSTRUCTOR readonly.

2024-02-01  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2024-02-01  Marek Polacek  <polacek@redhat.com>

	PR c++/112437
	* typeck.cc (treat_lvalue_as_rvalue_p): Bail out on sk_namespace in
	the move on throw of parms loop.

2024-01-26  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-01-24  Patrick Palka  <ppalka@redhat.com>

	PR c++/113529
	* call.cc (add_operator_candidates): Propagate error_mark_node
	result after recursing to find rewritten candidates.

2024-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/113347
	* semantics.cc (finalize_nrv_r): Handle null
	current_retval_sentinel.

2024-01-24  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2023-12-20  Jason Merrill  <jason@redhat.com>

	PR c++/103185
	* typeck.cc (cp_build_array_ref): Handle swapped operands.

2024-01-24  Jason Merrill  <jason@redhat.com>

	Backported from master:
	2023-12-20  Jason Merrill  <jason@redhat.com>

	PR c++/113088
	PR c++/33799
	* except.cc (maybe_splice_retval_cleanup): Handle an empty block.

2024-01-18  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-01-17  Patrick Palka  <ppalka@redhat.com>

	PR c++/113242
	PR c++/99493
	* pt.cc (invalid_tparm_referent_p) <case ADDR_EXPR>: Suppress
	DECL_ARTIFICIAL rejection test for class NTTP objects.

2024-01-15  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-01-15  Patrick Palka  <ppalka@redhat.com>

	PR c++/104634
	* pt.cc (maybe_new_partial_specialization): Propagate TREE_PUBLIC
	to the newly created partial specialization.

2024-01-15  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2024-01-15  Patrick Palka  <ppalka@redhat.com>

	PR c++/109899
	* init.cc (build_vec_delete_1): Assume expr_noexcept_p returns
	false in a template context.

2023-12-20  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-04-25  Patrick Palka  <ppalka@redhat.com>

	PR c++/108975
	* pt.cc (value_dependent_expression_p) <case VAR_DECL>:
	Suppress conservative early exit for reference variables
	when DECL_HAS_VALUE_EXPR_P.

2023-12-15  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2023-12-08  Jakub Jelinek  <jakub@redhat.com>

	PR sanitizer/112727
	* cp-gimplify.cc (cp_fold): If SAVE_EXPR has been previously
	folded, unshare_expr what is returned.

2023-12-12  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-07-21  Marek Polacek  <polacek@redhat.com>

	PR c++/110106
	* constexpr.cc (potential_constant_expression_1): Try to complete the
	type when !processing_template_decl.

2023-12-12  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-11-16  Marek Polacek  <polacek@redhat.com>

	PR c++/112410
	* parser.cc (cp_parser_direct_declarator): Maybe call
	abort_fully_implicit_template if it turned out the parameter list was
	ill-formed.

2023-12-12  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-07-14  Marek Polacek  <polacek@redhat.com>
		    Jason Merrill  <jason@redhat.com>

	PR c++/109876
	* decl.cc (cp_finish_decl): Set TREE_CONSTANT when initializing
	an object of empty class type.
	* pt.cc (value_dependent_expression_p) <case VAR_DECL>: Treat a
	constexpr-declared non-constant variable as value-dependent.

2023-12-05  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2023-12-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/112795
	* parser.cc (cp_parser_pragma_unroll): Use fold_non_dependent_expr
	instead of maybe_constant_value.

2023-11-24  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-11-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/111703
	PR c++/107939
	* constexpr.cc (potential_constant_expression_1) <case CALL_EXPR>:
	Fix FUNCTION_POINTER_TYPE_P test.

2023-11-24  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-11-15  Patrick Palka  <ppalka@redhat.com>

	PR c++/111703
	PR c++/112269
	* constexpr.cc (potential_constant_expression_1) <case VAR_DECL>:
	Only consider var_in_maybe_constexpr_fn if 'now' is false.
	<case INDIRECT_REF>: Likewise.

2023-11-23  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-11-22  Patrick Palka  <ppalka@redhat.com>

	PR c++/112633
	* pt.cc (tsubst_aggr_type): Handle empty TYPE_TEMPLATE_INFO
	in the entering_scope adjustment.

2023-11-17  Jason Merrill  <jason@redhat.com>

	PR c++/112301
	PR c++/102191
	PR c++/33799
	* except.cc (maybe_splice_retval_cleanup): Clear
	current_retval_sentinel when destroying retval.
	* semantics.cc (nrv_data): Add in_nrv_cleanup.
	(finalize_nrv): Set it.
	(finalize_nrv_r): Fix handling of throwing cleanups.

2023-11-17  Jason Merrill  <jason@redhat.com>

	* semantics.cc (finalize_nrv_r): [RETURN_EXPR]: Only replace the
	INIT_EXPR.

2023-11-17  Jason Merrill  <jason@redhat.com>

	PR c++/33799
	* except.cc (maybe_splice_retval_cleanup): Change
	recognition of function body and try scopes.
	* semantics.cc (do_poplevel): Call it after poplevel.
	(at_try_scope): New.
	* cp-tree.h (maybe_splice_retval_cleanup): Adjust.

2023-09-24  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-09-22  Patrick Palka  <ppalka@redhat.com>

	PR c++/111493
	* decl2.cc (grok_array_decl): Guard diagnostic and backward
	compatibility fallback code paths with tf_error.

2023-09-24  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-09-22  Patrick Palka  <ppalka@redhat.com>

	PR c++/111485
	* pt.cc (is_compatible_template_arg): New parameter 'args'.
	Add the outer template arguments 'args' to 'new_args'.
	(convert_template_argument): Pass 'args' to
	is_compatible_template_arg.

2023-09-24  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-09-19  Patrick Palka  <ppalka@redhat.com>

	PR c++/99631
	* semantics.cc (finish_decltype_type): For an NTTP object,
	return its type modulo cv-quals.

2023-09-22  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-09-20  Patrick Palka  <ppalka@redhat.com>

	PR c++/111471
	* cxx-pretty-print.cc (cxx_pretty_printer::expression)
	<case VAR_DECL>: Handle class NTTP objects by printing
	their type and value.
	<case VIEW_CONVERT_EXPR>: Strip const VIEW_CONVERT_EXPR
	wrappers for class NTTPs.
	(pp_cxx_template_argument_list): Don't handle class NTTP
	objects here.

2023-08-31  Jason Merrill  <jason@redhat.com>

	PR c++/109751
	* pt.cc (tsubst_friend_function): Don't check constraints.

2023-08-31  Jason Merrill  <jason@redhat.com>

	PR c++/92407
	* cp-tree.h (struct language_function): Add backward_goto.
	* decl.cc (check_goto): Set it.
	* typeck.cc (check_return_expr): Prevent NRV if set.

2023-08-16  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-08-11  Patrick Palka  <ppalka@redhat.com>

	PR c++/110927
	* parser.cc (cp_parser_type_requirement): Pass
	check_dependency_p=true instead of =false.

2023-08-11  Jason Merrill  <jason@redhat.com>

	PR c++/109678
	* constexpr.cc (cxx_fold_indirect_ref_1): Handle empty base first.

2023-08-11  Jason Merrill  <jason@redhat.com>

	PR c++/106310
	* parser.cc (cp_parser_template_name): Skip non-member
	lookup after the template keyword.
	(cp_parser_lookup_name): Pass down template_keyword_p.

2023-08-07  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-07-27  Patrick Palka  <ppalka@redhat.com>

	PR c++/110197
	* constexpr.cc (cxx_eval_array_reference): Allow synthesizing an
	empty subobject even if CONSTRUCTOR_NO_CLEARING is set.
	(cxx_eval_bare_aggregate): Set 'no_slot' to true more generally
	whenever new_ctx.ctor is set to NULL_TREE by init_subob_ctx,
	i.e. whenever initializing an subobject of empty type.
	(cxx_eval_vec_init_1): Define 'no_slot' as above and use it
	accordingly.

2023-08-07  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-07-26  Patrick Palka  <ppalka@redhat.com>

	PR c++/110566
	PR c++/108179
	* pt.cc (coerce_template_template_parms): Simplify by using
	DECL_INNERMOST_TEMPLATE_PARMS and removing redundant asserts.
	Always pass the parameters of the most general template to
	coerce_template_parms.

2023-07-27  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-07-26  Patrick Palka  <ppalka@redhat.com>

	PR c++/110809
	* pt.cc (unify) <case INTEGER_CST>: Generalize to handle
	REAL_CST as well.

2023-07-27  Release Manager

	* GCC 13.2.0 released.

2023-07-19  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-07-18  Patrick Palka  <ppalka@redhat.com>

	PR c++/110535
	* call.cc (add_conv_candidate): Check constraints.

2023-07-19  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-06-11  Patrick Palka  <ppalka@redhat.com>

	PR c++/110122
	* pt.cc (lookup_template_class): Extend shortcut for looking up the
	current class scope to consider outer class scopes too, and use
	current_nonlambda_class_type instead of current_class_type.  Only
	call coerce_template_parms when specializing a primary template.

2023-07-17  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-07-15  Patrick Palka  <ppalka@redhat.com>

	PR c++/110524
	* mangle.cc (write_expression): Handle TEMPLATE_ID_EXPR
	whose template is already an IDENTIFIER_NODE.

2023-07-01  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-06-29  Patrick Palka  <ppalka@redhat.com>

	PR c++/110468
	* init.cc (maybe_instantiate_nsdmi_init): Mask out all
	tsubst flags except for tf_warning_or_error.

2023-07-01  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-06-29  Patrick Palka  <ppalka@redhat.com>

	PR c++/110463
	* cp-gimplify.cc (cp_fold) <case CONSTRUCTOR>: Propagate
	CONSTRUCTOR_MUTABLE_POISON.

2023-06-23  Jason Merrill  <jason@redhat.com>

	* call.cc (maybe_init_list_as_array): Build a list.

2023-06-23  Jason Merrill  <jason@redhat.com>

	PR c++/110102
	* call.cc (maybe_init_list_as_array): Check that the element type is
	copyable.

2023-06-23  Jason Merrill  <jason@redhat.com>

	DR 2735
	PR c++/109247
	* call.cc (sfk_copy_or_move): New.
	(joust): Add tiebreaker for explicit conv and copy ctor.

2023-05-19  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-05-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/109871
	* call.cc (add_list_candidates): Check for invalid designated
	initialization sooner and even for types that have a list
	constructor.

2023-05-17  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2023-05-17  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109868
	* init.cc (build_zero_init_1): Don't initialize zero-width bitfields.
	For unions only initialize the first FIELD_DECL.

2023-05-16  Marek Polacek  <polacek@redhat.com>

	Backported from master:
	2023-05-16  Marek Polacek  <polacek@redhat.com>

	PR c++/109774
	* typeck.cc (check_return_expr): In a template, return only after
	suppressing -Wdangling-reference.

2023-05-12  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-05-11  Patrick Palka  <ppalka@redhat.com>

	PR c++/109745
	* typeck2.cc (poison_mutable_constructors): Define.
	(store_init_value): Use it instead of setting
	CONSTRUCTOR_MUTABLE_POISON directly.

2023-05-12  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-05-11  Patrick Palka  <ppalka@redhat.com>
		    Jonathan Wakely  <jwakely@redhat.com>

	PR c++/83258
	PR c++/80488
	PR c++/97700
	* pt.cc (convert_nontype_argument_function): Remove linkage
	requirement for C++17 and later.
	(invalid_tparm_referent_p) <case ADDR_EXPR>: Restrict
	DECL_ARTIFICIAL rejection test to VAR_DECL.

2023-05-12  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-05-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/109761
	* parser.cc (cp_parser_class_specifier): Don't pass a class
	context to noexcept_override_late_checks.
	(noexcept_override_late_checks): Remove 'type' parameter
	and use DECL_CONTEXT of 'fndecl' instead.

2023-05-12  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-05-07  Patrick Palka  <ppalka@redhat.com>

	PR c++/109651
	* pt.cc (coerce_template_args_for_ttp): Mention we can hit the
	current_template_parms fallback when level-lowering a bound ttp.
	(tsubst_template_decl): Add lambda_tparms parameter.  Prefer to
	use lambda_tparms instead of substituting DECL_TEMPLATE_PARMS.
	(tsubst_decl) <case TEMPLATE_DECL>: Pass NULL_TREE as lambda_tparms
	to tsubst_template_decl.
	(tsubst_lambda_expr): For a generic lambda, substitute
	DECL_TEMPLATE_PARMS and set current_template_parms to it
	before substituting the function type.  Pass the substituted
	DECL_TEMPLATE_PARMS as lambda_tparms to tsubst_template_decl.

2023-05-09  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2023-05-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109756
	* cp-gimplify.cc (process_stmt_assume_attribute): Diagnose pack
	expansion of assume attribute.

2023-05-03  Jason Merrill  <jason@redhat.com>

	Revert:
	2022-04-29  Jason Merrill  <jason@redhat.com>

	PR c++/91618
	PR c++/96604
	* friend.cc (do_friend): Call check_explicit_specialization here.
	* decl.cc (grokdeclarator): Not here.
	* decl2.cc (check_classfn): Or here.

2023-05-03  Jakub Jelinek  <jakub@redhat.com>

	Backported from master:
	2023-05-03  Jakub Jelinek  <jakub@redhat.com>

	* cp-gimplify.cc (cp_fold_data): Move definition earlier.
	(cp_gimplify_expr): Pass address of ff_genericize | ff_mce_false
	constructed data rather than &pset to cp_walk_tree with cp_fold_r.

2023-05-02  Jason Merrill  <jason@redhat.com>

	Revert:
	2022-05-24  Jason Merrill  <jason@redhat.com>

	* constexpr.cc (cxx_fold_indirect_ref): Add default arg.
	(cxx_eval_call_expression): Call it.
	(cxx_fold_indirect_ref_1): Handle null empty_base.

2023-05-02  Jason Merrill  <jason@redhat.com>

	PR c++/109666
	* name-lookup.cc (maybe_push_to_top_level)
	(maybe_pop_from_top_level): Split out...
	* pt.cc (instantiate_body): ...from here.
	* init.cc (maybe_instantiate_nsdmi_init): Use them.
	* name-lookup.h: Declare them..

2023-05-02  Jason Merrill  <jason@redhat.com>

	PR c++/108099
	* decl.cc (grokdeclarator): Don't clear typedef_decl after 'unsigned
	typedef' pedwarn.  Use c_common_signed_or_unsigned_type.  Also
	handle 'signed typedef'.

2023-04-26  Release Manager

	* GCC 13.1.0 released.

2023-04-19  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-04-19  Patrick Palka  <ppalka@redhat.com>

	PR c++/109556
	* pt.cc (try_class_unification): Don't ggc_free the copy of
	'targs'.

2023-04-17  Patrick Palka  <ppalka@redhat.com>

	Backported from master:
	2023-04-17  Patrick Palka  <ppalka@redhat.com>

	PR c++/109531
	* pt.cc (tsubst) <case BOUND_TEMPLATE_TEMPLATE_PARM>:
	In the level-lowering case just use lookup_template_class
	to rebuild the bound ttp.

2023-04-15  Jason Merrill  <jason@redhat.com>

	PR c++/109357
	* constexpr.cc (cxx_eval_constant_expression) [TARGET_EXPR]:
	Check for complex initializer.

2023-04-13  Patrick Palka  <ppalka@redhat.com>

	PR c++/109420
	* decl.cc (make_typename_type): Also ignore non-types during the
	lookup if tag_type corresponds to an elaborated-type-specifier.
	* pt.cc (tsubst) <case TYPENAME_TYPE>: Pass class_type or
	enum_type as tag_type to make_typename_type accordingly instead
	of always passing typename_type.

2023-04-13  Jason Merrill  <jason@redhat.com>

	PR c++/109277
	* semantics.cc (check_trait_type): Handle incomplete type directly.
	* typeck2.cc (cxx_incomplete_type_diagnostic): Remove assert.

2023-04-13  Jason Merrill  <jason@redhat.com>

	* typeck2.cc (cxx_incomplete_type_diagnostic): Return bool.
	* cp-tree.h (cxx_incomplete_type_diagnostic): Adjust.

2023-04-12  Jakub Jelinek  <jakub@redhat.com>

	* Make-lang.in (s-cp-module-version): New target.
	(cp/module.o): Depend on it.
	(MODULE_VERSION): Remove variable.
	(CFLAGS-cp/module.o): For -DMODULE_VERSION= argument just
	cat s-cp-module-version.

2023-04-09  Iain Sandoe  <iain@sandoe.co.uk>

	* coroutines.cc (coro_rewrite_function_body): Ensure that added
	bind expressions have scope blocks.

2023-04-04  Jason Merrill  <jason@redhat.com>

	PR c++/107484
	* decl2.cc (find_last_decl): Return early if DECL_USE_TEMPLATE.

2023-04-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/109300
	* decl.cc (cp_finish_decl): Diagnose ordinary auto deduction
	with no initializer, instead of asserting.

2023-04-01  Patrick Palka  <ppalka@redhat.com>

	PR c++/109160
	* cp-tree.h (do_auto_deduction): Add defaulted tmpl parameter.
	* pt.cc (convert_template_argument): Pass 'in_decl' as 'tmpl' to
	do_auto_deduction.
	(tsubst_decl) <case VAR_/TYPE_DECL>: Pass 'tmpl' instead of 't' as
	'in_decl' to coerce_template_parms.
	(unify) <case TEMPLATE_PARM_INDEX>: Pass TPARMS_PRIMARY_TEMPLATE
	as 'tmpl' to do_auto_deduction.
	(do_auto_deduction): Document default arguments.  Rename local
	variable 'tmpl' to 'ctmpl'.  Use 'tmpl' to obtain a full set of
	template arguments for satisfaction in the adc_unify case.

2023-04-01  Patrick Palka  <ppalka@redhat.com>

	PR c++/53164
	PR c++/105848
	* pt.cc (invalid_tparm_referent_p): Accept ADDR_EXPR of
	FUNCTION_DECL.
	(instantiate_class_template): Call mark_template_arguments_used.
	(tsubst_copy_and_build) <case CALL_EXPR>: Revert r13-995 change.
	(mark_template_arguments_used): Define.
	(instantiate_body): Call mark_template_arguments_used.

2023-04-01  Iain Sandoe  <iain@sandoe.co.uk>

	PR c++/101118
	* coroutines.cc (flatten_await_stmt): Use the current count of
	promoted temporaries to build a unique name for the frame entries.

2023-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/105452
	* search.cc (type_context_for_name_lookup): New.
	(accessible_p): Handle anonymous union.
	* init.cc (maybe_instantiate_nsdmi_init): Use
	type_context_for_name_lookup.
	* parser.cc (cp_parser_class_specifier): Likewise.
	* cp-tree.h (type_context_for_name_lookup): Declare.

2023-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/105221
	* pt.cc (unify) [FUNCTION_TYPE]: Handle function pointer
	conversions.

2023-03-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109319
	* decl2.cc (grok_array_decl): After emitting a pedwarn for
	-Wcomma-subscript, if processing_template_decl set orig_index_exp
	to compound expr from orig_index_exp_list.

2023-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/107897
	PR c++/108887
	* decl2.cc (record_mangling): Use symtab_node::reset.

2023-03-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109278
	* call.cc (convert_like_internal): If pedwarn for extended float
	type conversions doesn't report anything, avoid calling
	maybe_inform_about_fndecl_for_bogus_argument_init.

2023-03-29  Jason Merrill  <jason@redhat.com>

	PR c++/109321
	PR c++/109320
	* pt.cc (alias_ctad_tweaks): Rewrite deduced args.
	(type_targs_deducible_from): Handle null pack deduction.

2023-03-28  David Malcolm  <dmalcolm@redhat.com>

	PR c/107002
	* parser.cc (cp_parser_binary_expression): Update for new param of
	check_for_xor_used_as_pow.

2023-03-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109309
	* contracts.cc: Include intl.h.
	(check_postcondition_result): Don't form diagnostics from two halves
	of an English message to allow translations.

2023-03-24  Patrick Palka  <ppalka@redhat.com>

	PR c++/106969
	* parser.cc (cp_parser_class_specifier): Clear current_class_ptr
	and current_class_ref sooner, before parsing a class definition.

2023-03-24  Jason Merrill  <jason@redhat.com>

	PR c++/105481
	* pt.cc (type_unification_real): Adjust for partial ordering.

2023-03-23  Jason Merrill  <jason@redhat.com>

	PR c++/105996
	* typeck.cc (build_ptrmemfunc): Drop 0-offset optimization
	and location wrappers.

2023-03-23  Marek Polacek  <polacek@redhat.com>

	PR c++/107532
	* call.cc (class_has_reference_member_p): New.
	(class_has_reference_member_p_r): New.
	(reference_like_class_p): Don't look for a specific constructor.
	Use a DFS walk with class_has_reference_member_p_r.

2023-03-23  Jason Merrill  <jason@redhat.com>

	PR c++/109241
	* pt.cc (find_parameter_packs_r): Handle null TREE_BINFO.

2023-03-22  Jason Merrill  <jason@redhat.com>

	PR c++/108390
	* pt.cc (unify): Use fold of build_nop instead of fold_convert.

2023-03-22  Jason Merrill  <jason@redhat.com>

	PR c++/108795
	* semantics.cc (finish_id_expression_1): Check scope before
	returning id_expression.

2023-03-22  Alex Coplan  <alex.coplan@arm.com>

	PR c++/109177
	* call.cc (build_over_call): Use make_temp_override to suppress
	both unavailable and deprecated warnings when calling
	build_addr_func.

2023-03-21  Jason Merrill  <jason@redhat.com>

	PR c++/106890
	* init.cc (maybe_instantiate_nsdmi_init): Don't leave
	current_function_decl set to a constructor.

2023-03-20  Marek Polacek  <polacek@redhat.com>

	PR c++/109159
	* call.cc (add_template_candidate_real): Add explicit decls to the
	set of candidates when the initializer is a braced-init-list.

2023-03-20  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109164
	* cp-tree.h (var_needs_tls_wrapper): Declare.
	* decl2.cc (var_needs_tls_wrapper): No longer static.
	* decl.cc (cp_finish_decl): Clear TREE_READONLY on TLS variables
	for which a TLS wrapper will be needed.

2023-03-17  Jason Merrill  <jason@redhat.com>

	PR c++/108975
	* lambda.cc (prune_lambda_captures): Don't bother in a template.

2023-03-17  Jason Merrill  <jason@redhat.com>

	PR c++/109172
	* except.cc (build_throw): Check dtor access.

2023-03-17  Jason Merrill  <jason@redhat.com>

	PR c++/69410
	* friend.cc (do_friend): Handle namespace as scope argument.
	* decl.cc (grokdeclarator): Pass down in_namespace.

2023-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/105809
	* init.cc (get_nsdmi): Split out...
	(maybe_instantiate_nsdmi_init): ...this function.
	* cp-tree.h: Declare it.
	* pt.cc (tsubst_expr): Use it.

2023-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/108242
	* pt.cc (tsubst_expr) [TAG_DEFN]: Handle partial instantiation.

2023-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/101869
	* semantics.cc (finish_qualified_id_expr): Don't try to build a
	pointer-to-member if the scope is an enumeration.

2023-03-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/109030
	* constexpr.cc (maybe_constant_init_1): For an unevaluated
	non-manifestly-constant operand, don't constant evaluate
	and instead call fold_to_constant as in maybe_constant_value.

2023-03-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/100288
	* constraint.cc (satisfaction_cache::get): Relax overly strict
	checking assert in the constraint recursion case.

2023-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/105406
	* coroutines.cc (build_co_await): Handle lvalue 'o'.

2023-03-15  Jason Merrill  <jason@redhat.com>

	PR c++/103871
	PR c++/98056
	* typeck.cc (cp_build_modify_expr): Allow array initialization of
	DECL_ARTIFICIAL variable.

2023-03-15  Marek Polacek  <polacek@redhat.com>

	PR c++/107280
	* constexpr.cc (cxx_eval_store_expression): Strip location wrappers.

2023-03-15  Jason Merrill  <jason@redhat.com>

	PR c++/58538
	* semantics.cc (check_template_template_default_arg): Check
	maybe_get_template_decl_from_type_decl.

2023-03-15  Jason Merrill  <jason@redhat.com>

	PR c++/108179
	PR c++/104107
	PR c++/95036
	* pt.cc (coerce_template_template_parms): Use args from
	DECL_CONTEXT (arg_tmpl) instead of outer_args.

2023-03-15  Jason Merrill  <jason@redhat.com>

	PR c++/108179
	* pt.cc	(coerce_template_template_parms): Take the arg and parm
	templates directly.
	(coerce_template_template_parm): Adjust.
	(template_template_parm_bindings_ok_p): Adjust.
	(convert_template_argument): Adjust.

2023-03-14  Patrick Palka  <ppalka@redhat.com>

	PR c++/96830
	* pt.cc (push_inline_template_parms_recursive): Set
	TEMPLATE_PARMS_CONSTRAINTS.
	(push_template_decl): For an out-of-line declaration, verify
	constraints for each enclosing template scope match those of the
	original template declaratation.

2023-03-14  Patrick Palka  <ppalka@redhat.com>

	PR c++/96830
	* pt.cc (redeclare_class_template): Add missing "of" in
	constraint mismatch diagnostic.
	(tsubst_friend_class): For an already declared class template,
	substitute and pass the friend declaration's constraints to
	redeclare_class_template instead of passing the existing
	template's constraints.

2023-03-14  Jason Merrill  <jason@redhat.com>

	PR c++/108468
	* pt.cc (unify_pack_expansion): Check that TPARMS_PRIMARY_TEMPLATE
	is non-null.

2023-03-14  Jason Merrill  <jason@redhat.com>

	PR c++/107310
	* cp-gimplify.cc (genericize_if_stmt): Restore folding
	of constant conditions.

2023-03-14  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109096
	* tree.cc (record_has_unique_obj_representations): Ignore unnamed
	bitfields.

2023-03-13  Jason Merrill  <jason@redhat.com>

	PR c++/107128
	* parser.cc (cp_parser_set_decl_spec_type): Use
	redefined_builtin_type for extended_float_type_p.

2023-03-13  Marek Polacek  <polacek@redhat.com>

	PR c++/107532
	* call.cc (reference_like_class_p): Check for std::span.

2023-03-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/107558
	* decl.cc (cp_finish_decl): Don't clear TREE_READONLY on
	automatic non-aggregate variables just because of
	-fmerge-all-constants.

2023-03-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109039
	* class.cc (end_of_class): For bit-fields, instead of computing
	offset as sum of byte_position (field) and DECL_SIZE_UNIT (field),
	compute it as sum of bit_position (field) and DECL_SIZE (field)
	divided by BITS_PER_UNIT rounded up.

2023-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/108972
	* lambda.cc (compare_lambda_template_head): Check more
	for error_mark_node.

2023-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/108566
	* mangle.cc (anon_aggr_naming_decl): New.
	(write_unqualified_name): Use it.

2023-03-10  Jakub Jelinek  <jakub@redhat.com>

	PR c/108079
	* decl.cc (poplevel): Suppress OPT_Wunused_variable warning
	after diagnosing it.

2023-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/108099
	* decl.cc (grokdeclarator): Handle non-typedef typedef_decl.

2023-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/108542
	* class.cc (instantiate_type): Strip location wrapper.

2023-03-09  Jason Merrill  <jason@redhat.com>

	PR c++/108773
	* init.cc (find_allocator_temps_r): New.
	(combine_allocator_temps): Replace find_allocator_temp.
	(build_vec_init): Adjust.

2023-03-09  Jason Merrill  <jason@redhat.com>

	DR 2664
	PR c++/102529
	* pt.cc (alias_ctad_tweaks): Continue after deduction failure.

2023-03-09  Jason Merrill  <jason@redhat.com>
	    Michael Spertus  <mike@spertus.com>

	PR c++/105841
	* pt.cc	(corresponding_template_parameter_list): Split out...
	(corresponding_template_parameter): ...from here.
	(find_template_parameters): Factor out...
	(find_template_parameter_info::find_in): ...this function.
	(find_template_parameter_info::find_in_recursive): New.
	(find_template_parameter_info::found): New.
	(alias_ctad_tweaks): Only add parms used in the deduced args.

2023-03-09  Jason Merrill  <jason@redhat.com>

	* cp-trait.def (IS_DEDUCIBLE): Add space to name.

2023-03-09  Jason Merrill  <jason@redhat.com>

	PR c++/105841
	* cp-trait.def (IS_DEDUCIBLE): New.
	* cxx-pretty-print.cc (pp_cxx_trait): Handle non-type.
	* parser.cc (cp_parser_trait): Likewise.
	* tree.cc (cp_tree_equal): Likewise.
	* pt.cc (tsubst_copy_and_build): Likewise.
	(type_targs_deducible_from): New.
	(alias_ctad_tweaks): Use it.
	* semantics.cc (trait_expr_value): Handle CPTK_IS_DEDUCIBLE.
	(finish_trait_expr): Likewise.
	* constraint.cc (diagnose_trait_expr): Likewise.
	* cp-tree.h (type_targs_deducible_from): Declare.

2023-03-07  Jason Merrill  <jason@redhat.com>

	PR c++/108526
	PR c++/106651
	* pt.cc (tsubst_function_decl): Don't replace the closure
	parameter if DECL_STATIC_FUNCTION_P.

2023-03-07  Marek Polacek  <polacek@redhat.com>

	PR c++/107532
	* call.cc (reference_like_class_p): New.
	(do_warn_dangling_reference): Add new bool parameter.  See through
	reference_like_class_p.

2023-03-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/109042
	* rtti.cc (emit_support_tinfo_1): Don't assert that last
	unemitted_tinfo_decls element is tinfo, instead pop from it only in
	that case.
	* decl2.cc (c_parse_final_cleanups): Don't call emit_tinfo_decl
	for unemitted_tinfO_decls which have already non-NULL DECL_INITIAL.

2023-03-07  Marek Polacek  <polacek@redhat.com>

	PR c++/109030
	* constexpr.cc (cxx_eval_call_expression): Relax assert.

2023-03-07  Marek Polacek  <polacek@redhat.com>

	PR c++/107939
	* constexpr.cc (potential_constant_expression_1) <case CALL_EXPR>: Pass
	'any' when recursing on a VAR_DECL and not a pointer to function.

2023-03-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108702
	* constexpr.cc: Include toplev.h.
	(cxx_eval_constant_expression) <case DECL_EXPR>: When seeing a local
	static initialized by constant expression outside of a constexpr
	function which has been deferred by make_rtl_for_nonlocal_decl,
	call rest_of_decl_compilation on it.

2023-03-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/108998
	* pt.cc (el_data::skipped_trees): New data member.
	(extract_locals_r): Push to skipped_trees any unevaluated
	contexts that we skipped over.
	(extract_local_specs): For the second walk, start from each
	tree in skipped_trees.

2023-03-03  Alexandre Oliva  <oliva@adacore.com>

	* typeck.cc (cp_build_binary_op): Suppress redundant warning
	for pfn null test in pmfn test with vbit-in-delta.

2023-03-02  Jakub Jelinek  <jakub@redhat.com>

	PR target/108883
	* cp-tree.h (enum cp_tree_index): Remove CPTI_FALLBACK_DFLOAT*_TYPE
	enumerators.
	(fallback_dfloat32_type, fallback_dfloat64_type,
	fallback_dfloat128_type): Remove.
	* rtti.cc (emit_support_tinfo_1): If not emitted already, call
	emit_tinfo_decl and remove from unemitted_tinfo_decls right away.
	(emit_support_tinfos): Move &dfloat*_type_node from fundamentals array
	into new fundamentals_with_fallback array.  Call emit_support_tinfo_1
	on elements of that array too, with the difference that if
	the type is NULL, use a fallback REAL_TYPE for it temporarily.
	Drop the !targetm.decimal_float_supported_p () handling.  Call
	targetm.emit_support_tinfos at the end.
	* mangle.cc (write_builtin_type): Remove references to
	fallback_dfloat*_type.  Handle bfloat16_type_node mangling.

2023-03-02  Patrick Palka  <ppalka@redhat.com>

	PR c++/108243
	PR c++/97553
	* cp-gimplify.cc (cp_fully_fold): Add an internal overload that
	additionally takes and propagate an mce_value parameter, and
	define the existing public overload in terms of it.
	(cp_fully_fold_init): Pass mce_false to cp_fully_fold.

2023-03-02  Patrick Palka  <ppalka@redhat.com>

	PR c++/108243
	* constexpr.cc (maybe_constant_init_1): Override
	manifestly_const_eval to true if is_static.

2023-03-02  Jakub Jelinek  <jakub@redhat.com>

	PR debug/108716
	* cp-gimplify.cc (cp_genericize_r) <case USING_STMT>: Set
	DECL_SOURCE_LOCATION on IMPORTED_DECL to expression location
	of USING_STMT or input_location.

2023-03-02  Marek Polacek  <polacek@redhat.com>

	PR c++/106259
	* parser.cc (class_decl_loc_t::diag_mismatched_tags): If the first
	lookup of SPEC didn't find anything, try to look for
	most_general_template.

2023-03-02  Jakub Jelinek  <jakub@redhat.com>

	PR c++/105839
	* parser.cc (cp_convert_omp_range_for): Allow in assert
	decomp_first_name without DECL_HAS_VALUE_EXPR_P if it has
	error_mark_node type.
	(cp_finish_omp_range_for): Don't set DECL_HAS_VALUE_EXPR_P back
	on decls which have error_mark_node type.

2023-03-01  Marek Polacek  <polacek@redhat.com>

	PR c++/107574
	* constexpr.cc (cxx_eval_constant_expression): Emit an error when
	a PTRMEM_CST cannot be evaluated.

2023-03-01  Patrick Palka  <ppalka@redhat.com>

	* pt.cc (tsubst_scope): Define.
	(tsubst_decl) <case USING_DECL>: Call tsubst_scope instead of
	calling tsubst_scope with tf_qualifying_scope set.
	(tsubst_qualified_id): Call tsubst_scope instead of
	calling tsubst with tf_qualifying_scope set.
	(tsubst_copy): Immediately delegate to tsubst for all TYPE_P
	trees.  Remove tf_qualifying_scope manipulation.
	<case SCOPE_REF>: Call tsubst_scope instead of calling
	tsubst with tf_qualifying_scope set.

2023-03-01  Patrick Palka  <ppalka@redhat.com>
	    Jason Merrill  <jason@redhat.com>

	PR c++/108219
	PR c++/108218
	* constexpr.cc (fold_to_constant): Define.
	(maybe_constant_value): Move up early exit test for unevaluated
	operands.  Try reducing an unevaluated operand to a constant via
	fold_to_constant.
	(fold_non_dependent_expr_template): Add early exit test for
	CONSTANT_CLASS_P nodes.  Try reducing an unevaluated operand
	to a constant via fold_to_constant.
	* cp-tree.h (fold_to_constant): Declare.

2023-03-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108606
	* constexpr.cc (potential_constant_expression_1) <case DECL_EXPR>:
	Only recurse on DECL_INITIAL (tmp) if tmp is a VAR_DECL, otherwise
	just return true.

2023-02-28  Patrick Palka  <ppalka@redhat.com>

	PR c++/108848
	* pt.cc (finish_template_variable): Move dependence check
	to here from ...
	(lookup_and_finish_template_variable): ... here.
	* semantics.cc (finish_id_expression_1): Call
	finish_template_variable sooner, before (and regardless of) the
	type_dependent_expression_p test.

2023-02-28  Marek Polacek  <polacek@redhat.com>

	PR c++/108550
	* pt.cc (lookup_and_finish_template_variable): Clear tf_partial.

2023-02-20  Marek Polacek  <polacek@redhat.com>

	PR c++/101073
	* constexpr.cc (cxx_eval_call_expression): Replace shortcutting trivial
	constructor/op= with a checking assert.

2023-02-20  Marek Polacek  <polacek@redhat.com>

	PR c++/108829
	* pt.cc (prepend_one_capture): Set LAMBDA_CAPTURE_EXPLICIT_P.
	(tsubst_lambda_expr): Pass LAMBDA_CAPTURE_EXPLICIT_P to
	prepend_one_capture.

2023-02-18  Jason Merrill  <jason@redhat.com>

	DR 2518
	PR c++/52809
	PR c++/53638
	PR c++/87389
	PR c++/89741
	PR c++/92099
	PR c++/104041
	PR c++/104691
	* semantics.cc (finish_static_assert): Don't diagnose in
	template context.

2023-02-17  Patrick Palka  <ppalka@redhat.com>

	PR c++/108243
	PR c++/97553
	* cp-gimplify.cc (enum fold_flags): Define.
	(fold_flags_t): Declare.
	(cp_fold_data::genericize): Replace this data member with ...
	(cp_fold_data::fold_flags): ... this.
	(cp_fold_r): Adjust use of cp_fold_data and calls to cp_fold.
	(cp_fold_function): Likewise.
	(cp_fold_maybe_rvalue): Add an internal overload that
	additionally takes and propagates a fold_flags_t parameter, and
	define the existing public overload in terms of it.
	(cp_fold_rvalue): Likewise.
	(cp_fully_fold_init): Adjust use of cp_fold_data.
	(fold_cache): Replace with ...
	(fold_caches): ... this 2-element array of caches.
	(get_fold_cache): Define.
	(clear_fold_cache): Adjust.
	(cp_fold): Add fold_flags_t parameter.  Use get_fold_cache.
	Pass flags to calls to cp_fold, cp_fold_rvalue and
	cp_fold_maybe_rvalue.
	<case CALL_EXPR>: If ff_mce_false is set, fold
	__builtin_is_constant_evaluated to false and pass mce_false to
	maybe_constant_value.

2023-02-17  Patrick Palka  <ppalka@redhat.com>

	* constexpr.cc (constexpr_call::manifestly_const_eval): Give
	it type int instead of bool.
	(constexpr_ctx::manifestly_const_eval): Give it type mce_value
	instead of bool.
	(cxx_eval_builtin_function_call): Adjust after making
	manifestly_const_eval tri-state.
	(cxx_eval_call_expression): Likewise.
	(cxx_eval_binary_expression): Likewise.
	(cxx_eval_conditional_expression): Likewise.
	(cxx_eval_constant_expression): Likewise.
	(cxx_eval_outermost_constant_expr): Likewise.
	(cxx_constant_value): Likewise.
	(cxx_constant_dtor): Likewise.
	(maybe_constant_value): Give manifestly_const_eval parameter
	type mce_value instead of bool and adjust accordingly.
	(fold_non_dependent_expr_template): Adjust call
	to cxx_eval_outermost_constant_expr.
	(fold_non_dependent_expr): Likewise.
	(maybe_constant_init_1): Likewise.
	* constraint.cc (satisfy_atom): Adjust call to
	maybe_constant_value.
	* cp-tree.h (enum class mce_value): Define.
	(maybe_constant_value): Adjust manifestly_const_eval parameter
	type and default argument.
	* decl.cc (compute_array_index_type_loc): Adjust call to
	maybe_constant_value.
	* pt.cc (convert_nontype_argument): Likewise.

2023-02-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/107773
	* cp-tree.h (enum tsubst_flags): New flag tf_qualifying_scope.
	* decl.cc (make_typename_type): Use lookup_member instead of
	lookup_field.  If tf_qualifying_scope is set, pass want_type=true
	instead of =false to lookup_member.  Generalize format specifier
	in diagnostic to handle both type and non-type bindings.
	* pt.cc (tsubst_aggr_type_1): Clear tf_qualifying_scope.  Tidy
	the function.
	(tsubst_decl) <case USING_DECL>: Set tf_qualifying_scope when
	substituting USING_DECL_SCOPE.
	(tsubst): Clear tf_qualifying_scope right away and remember if
	it was set.  Do the same for tf_tst_ok sooner.
	<case TYPENAME_TYPE>: Set tf_qualifying_scope when substituting
	TYPE_CONTEXT.  Pass tf_qualifying_scope to make_typename_type
	if it was set.
	(tsubst_qualified_id): Set tf_qualifying_scope when substituting
	the scope.
	(tsubst_copy): Clear tf_qualifying_scope and remember if it was
	set.
	<case SCOPE_REF>: Set tf_qualifying_scope when substituting the
	scope.
	<case *_TYPE>: Pass tf_qualifying_scope to tsubst if it was set.
	* search.cc (lookup_member): Document default argument.

2023-02-16  Patrick Palka  <ppalka@redhat.com>

	* cp-tree.h: Mechanically drop static from static inline
	functions via s/^static inline/inline/g.

2023-02-15  Marek Polacek  <polacek@redhat.com>

	PR c++/106675
	* call.cc (joust_maybe_elide_copy): Return false for ck_ambig.

2023-02-10  Marek Polacek  <polacek@redhat.com>

	PR c++/107079
	* call.cc (set_up_extended_ref_temp): Pass var to maybe_constant_init.

2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_allocate): Parse align
	clause and check for restrictions.

2023-02-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108698
	* mangle.cc (write_expression, write_template_arg): Handle
	EXCESS_PRECISION_EXPR with REAL_CST operand as
	write_template_arg_literal on fold_convert of the REAL_CST
	to EXCESS_PRECISION_EXPR type.

2023-02-06  Patrick Palka  <ppalka@redhat.com>

	PR c++/107461
	* cp-tree.h (call_expr_dependent_name): Declare.
	* pt.cc (iterative_hash_template_arg) <case CALL_EXPR>: Use
	call_expr_dependent_name instead of dependent_name.
	* tree.cc (call_expr_dependent_name): Define.
	(called_fns_equal): Adjust to take two CALL_EXPRs instead of
	CALL_EXPR_FNs thereof.  Use call_expr_dependent_name instead
	of dependent_name.
	(cp_tree_equal) <case CALL_EXPR>: Adjust call to called_fns_equal.

2023-02-03  Marek Polacek  <polacek@redhat.com>

	PR c++/108158
	* constexpr.cc (cxx_eval_array_reference): Don't replace
	new_ctx.object.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/107461
	* semantics.cc (finish_call_expr): Strip ADDR_EXPR from
	the selected callee during overload set pruning.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/96745
	* class.cc (check_methods): Diagnose an unviable OVERLOAD
	set for CLASSTYPE_DESTRUCTOR differently from an ambiguous one.
	Then prune the OVERLOAD to a single function.
	(check_bases_and_members): Handle CLASSTYPE_DESTRUCTOR being
	an OVERLOAD when calling deduce_noexcept_on_destructor.
	Document why it has to be called before check_methods.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/108579
	* class.cc (check_methods): Swap order of constraints_satisfied_p
	and copy/move_fn_p tests.

2023-02-01  Marek Polacek  <polacek@redhat.com>

	PR c++/107755
	* call.cc (build_new_op): Don't call warn_logical_operator when
	processing a template.

2023-02-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108607
	* constexpr.cc (cxx_eval_constant_expression): Handle OMP_*
	and OACC_* constructs as non-constant.
	(potential_constant_expression_1): Handle OMP_SCAN and OMP_SCOPE.

2023-02-01  Jason Merrill  <jason@redhat.com>

	* class.cc (note_name_declared_in_class): Change from permerror to
	-Wchanges-meaning pedwarn, forcing -pedantic-errors for most cases.

2023-01-31  Jason Merrill  <jason@redhat.com>

	PR c++/108559
	* cp-gimplify.cc (any_non_eliding_target_exprs): New.
	(cp_genericize_init): Check it.

2023-01-31  Marek Polacek  <polacek@redhat.com>

	PR c++/107593
	PR c++/108597
	* cp-tree.h (instantiation_dependent_expression_p): Don't
	declare here.

2023-01-26  Marek Polacek  <polacek@redhat.com>

	PR c++/105300
	* parser.cc: Remove unnecessary forward declarations.
	(cp_parser_string_literal): New wrapper.
	(cp_parser_string_literal_common): Renamed from
	cp_parser_string_literal.  Add a bool parameter.  Give an error when
	UDLs are not permitted.
	(cp_parser_userdef_string_literal): New wrapper.
	(finish_userdef_string_literal): Renamed from
	cp_parser_userdef_string_literal.
	(cp_parser_primary_expression): Call cp_parser_userdef_string_literal
	instead of cp_parser_string_literal.
	(cp_parser_linkage_specification): Move a variable declaration closer
	to its first use.
	(cp_parser_static_assert): Likewise.
	(cp_parser_operator): Call cp_parser_userdef_string_literal instead of
	cp_parser_string_literal.
	(cp_parser_asm_definition): Move a variable declaration closer to its
	first use.
	(cp_parser_asm_specification_opt): Move variable declarations closer to
	their first use.
	(cp_parser_asm_operand_list): Likewise.
	(cp_parser_asm_clobber_list): Likewise.

2023-01-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108503
	* parser.cc (cp_convert_omp_range_for): If cp_finish_decomp has been
	called in !processing_template_decl with processing_template_decl
	temporarily set, clear DECL_HAS_VALUE_EXPR_P on the vars temporarily.
	(cp_finish_omp_range_for): And set it back again here.

2023-01-25  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108525
	* mangle.cc (write_closure_type_name): Don't assume all
	lambda operator() fns are methods.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/108504
	* parser.cc (cp_lexer_new_main): Pass C_LEX_STRING_NO_JOIN for first
	token, too.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/108526
	* pt.cc (tsubst_function_decl): Handle static lambda.

2023-01-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108474
	* cp-gimplify.cc (cp_fold_r): Revert 2023-01-19 changes.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/107303
	PR c++/107329
	* cp-gimplify.cc (cp_fold_r) [TARGET_EXPR]: In case of double
	TARGET_EXPR, keep the outer one instead of the inner one.
	(maybe_replace_decl): New.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/107267
	* cp-gimplify.cc (cp_gimplify_init_expr): Allow unexpected elision
	of trivial types.

2023-01-23  Marek Polacek  <polacek@redhat.com>

	PR c++/107797
	* cvt.cc (ocp_convert): copy_warning when creating a new
	COMPOUND_EXPR.
	* init.cc (build_new_1): Suppress -Wunused-value on
	compiler-generated COMPOUND_EXPRs.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/108195
	* call.cc (build_user_type_conversion_1): Check whether the
	iterators also find a list ctor.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/108496
	* decl.cc (grokdeclarator): Check whether DECL_RESULT is already
	set.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/53288
	DR 1299
	* call.cc (extend_ref_init_temps_1): Handle ptrmem expression.

2023-01-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108437
	* cp-tree.h (keep_unused_object_arg): Declare.
	* call.cc (keep_unused_object_arg): No longer static.
	* tree.cc (build_min_non_dep_op_overload): Handle ARRAY_REF
	with overload being static member function.

2023-01-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/53932
	* cp-gimplify.cc (cp_fold_r): During cp_fully_fold_init replace
	DECL_ANON_UNION_VAR_P VAR_DECLs with their corresponding
	DECL_VALUE_EXPR.

2023-01-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/105593
	* decl.cc (cp_finish_decl): Check warning_enabled_at
	at the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead
	of warn_init_self.

2023-01-14  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108365
	* typeck.cc (cp_build_binary_op): Use may_shorten_divmod for integral
	division or modulo.

2023-01-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108285
	* cvt.cc (cp_convert_and_check): For EXCESS_PRECISION_EXPR
	use its operand except that for warning purposes use the original
	EXCESS_PRECISION_EXPR.
	* call.cc (convert_like_internal): Only look through
	EXCESS_PRECISION_EXPR when calling cp_convert, not when calling
	cp_convert_and_check.

2023-01-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/105838
	PR c++/108047
	PR c++/108266
	* call.cc (maybe_init_list_as_range): Always return NULL_TREE if
	processing_template_decl.

2023-01-05  Patrick Palka  <ppalka@redhat.com>

	PR c++/108275
	* parser.cc (cp_parser_class_head): Use dk_deferred instead of
	dk_no_check when parsing the class name.

2023-01-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108286
	* semantics.cc (finish_omp_target_clauses): Ignore clauses other than
	OMP_CLAUSE_MAP.

2023-01-04  Patrick Palka  <ppalka@redhat.com>

	PR c++/108282
	* decl2.cc (mark_single_function): Ignore mark_used failure
	only in a non-SFINAE context rather than in a SFINAE one.

2023-01-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108206
	* decl.cc (merge_default_template_args): Return false if either
	new_parm or old_parm are erroneous.


Copyright (C) 2023 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

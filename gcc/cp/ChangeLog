2025-02-17  Jason Merrill  <jason@redhat.com>

	PR c++/118856
	PR c++/118763
	* cp-tree.h (TARGET_EXPR_INTERNAL_P): New.
	* call.cc (extend_temps_r): Check it instead of CLEANUP_EH_ONLY.
	* tree.cc (get_internal_target_expr): Set it instead.
	* typeck2.cc (maybe_push_temp_cleanup): Don't set CLEANUP_EH_ONLY.

2025-02-15  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118846
	* cp-tree.h (WILDCARD_TYPE_P): Include UNBOUND_CLASS_TEMPLATE.
	* decl2.cc (min_vis_expr_r): Don't assume a TEMPLATE_DECL will
	be a function or variable.

2025-02-15  Jason Merrill  <jason@redhat.com>

	PR c++/118053
	* constexpr.cc (cxx_eval_constant_expression): Generalize
	DECL_VALUE_EXPR invisiref handling.

2025-02-14  Marek Polacek  <polacek@redhat.com>

	* pt.cc (tsubst_expr) <COMPONENT_REF>: Assign the result of
	force_paren_expr.

2025-02-14  Jason Merrill  <jason@redhat.com>

	PR c++/118856
	* call.cc (set_up_extended_ref_temp): Retain a TARGET_EXPR for
	cleanups if something later in initialization throws.
	(extend_temps_r): Don't extend eliding or EH-only TARGET_EXPRs.
	* cp-tree.h (get_internal_target_expr): Declare.
	* tree.cc (get_internal_target_expr): New.
	* decl.cc (cp_finish_decomp, expand_static_init): Use it.
	* except.cc (build_throw): Likewise.
	* init.cc (build_new_1, build_vec_init, build_delete): Likewise.
	(build_vec_delete): Likewise.
	* typeck2.cc (maybe_push_temp_cleanup): Likewise.

2025-02-14  Jason Merrill  <jason@redhat.com>

	* init.cc (perform_member_init): Remove unicode from comment.

2025-02-14  Marek Polacek  <polacek@redhat.com>

	PR c++/116379
	* pt.cc (tsubst_expr) <COMPONENT_REF>: Use force_paren_expr to set
	REF_PARENTHESIZED_P.

2025-02-14  Nathaniel Shead  <nathanieloshead@gmail.com>

	* lambda.cc (record_lambda_scope): Clear mangling scope for
	otherwise unattached lambdas in class member templates.

2025-02-14  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/107741
	* cp-tree.h (is_static_data_member_initialized_in_class):
	Declare new predicate.
	* decl2.cc (start_initialized_static_member): Push the
	TEMPLATE_DECL when appropriate.
	(is_static_data_member_initialized_in_class): New predicate.
	(finish_initialized_static_member): Use it.
	* lambda.cc (record_lambda_scope): Likewise.
	* parser.cc (cp_parser_init_declarator): Start the member decl
	early for static members so that lambda scope is set.
	(cp_parser_template_declaration_after_parameters): Don't
	register in-class initialized static members here.

2025-02-13  Jason Merrill  <jason@redhat.com>

	* tree.cc (handle_init_priority_attribute): Use OPT_prio_ctor_dtor.

2025-02-13  Jason Merrill  <jason@redhat.com>

	* decl.cc (omp_declare_variant_finalize_one): Use forward_parm.

2025-02-13  Jason Merrill  <jason@redhat.com>

	PR c++/118856
	* call.cc (struct extend_temps_data): Add var_map.
	(extend_all_temps): Adjust.
	(set_up_extended_ref_temp): Make walk_data void*.
	(extend_temps_r): Remap variables.  Handle pset here.
	Extend all TARGET_EXPRs.

2025-02-13  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118849
	* decl2.cc (min_vis_expr_r): Constrain visibility according to
	the type of decl_constant_var_p decls.

2025-02-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118822
	PR c++/118833
	* semantics.cc (adjust_loop_decl_cond): Allow multiple trailing
	CLEANUP_STMT levels in *BODY_P.  Set *CLEANUP_P to the number
	of levels rather than one particular cleanup, keep the cleanups
	in *PREP_P.  Set *BODY_P to the last stmt in the cur_stmt_list
	or NULL if *CLEANUP_P and the innermost cur_stmt_list is empty.
	(finish_loop_cond_prep): New function.
	(finish_while_stmt, finish_for_stmt): Use it.  Don't call
	set_one_cleanup_loc.
	* constexpr.cc (cxx_eval_loop_expr): Adjust handling of
	{FOR,WHILE}_COND_{PREP,CLEANUP}.

2025-02-11  Jason Merrill  <jason@redhat.com>

	PR c++/118574
	PR c++/107637
	* call.cc (struct extend_temps_data): New.
	(extend_temps_r, extend_all_temps): New.
	(set_up_extended_ref_temp): Handle tree walk case.
	(extend_ref_init_temps): Cal extend_all_temps.
	* decl.cc (initialize_local_var): Revert ext-temps change.
	* parser.cc (cp_convert_range_for): Likewise.
	(cp_parser_omp_loop_nest): Likewise.
	* pt.cc (tsubst_stmt): Likewise.
	* semantics.cc (finish_for_stmt): Likewise.

2025-02-11  Sandra Loosemore  <sloosemore@baylibre.com>

	* parser.cc (cp_finish_omp_declare_variant): Update call to
	omp_check_context_selector.
	(cp_parser_omp_metadirective): Likewise.

2025-02-11  Simon Martin  <simon@nasilyan.com>

	PR c++/118306
	PR c++/118304
	* decl.cc (maybe_strip_indirect_ref): New.
	(check_special_function_return_type): Take declarator as input.
	Call maybe_strip_indirect_ref and error out if it returns true.
	(grokdeclarator): Update call to
	check_special_function_return_type.

2025-02-11  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118807
	* pt.cc (reregister_specialization): Remove spec from
	DECL_TEMPLATE_INSTANTIATIONS.

2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/115586
	* parser.cc (cp_parser_range_for): For name independent decls in
	structured bindings, only push the name/binding once per
	structured binding.

2025-02-07  Jakub Jelinek  <jakub@redhat.com>
	    Jason Merrill  <jason@redhat.com>

	PR c++/86769
	* semantics.cc (set_one_cleanup_loc): New function.
	(set_cleanup_locs): Use it.
	(simplify_loop_decl_cond): Remove.
	(adjust_loop_decl_cond): New function.
	(begin_while_stmt): Add 2 further NULL_TREE operands to build_stmt.
	(finish_while_stmt_cond): Call adjust_loop_decl_cond instead of
	simplify_loop_decl_cond.
	(finish_while_stmt): Call do_poplevel also on WHILE_COND_PREP if
	non-NULL and also use pop_stmt_list rather than do_poplevel for
	WHILE_BODY in that case.  Call set_one_cleanup_loc.
	(begin_for_stmt): Add 2 further NULL_TREE operands to build_stmt.
	(finish_for_cond): Call adjust_loop_decl_cond instead of
	simplify_loop_decl_cond.
	(finish_for_stmt): Call do_poplevel also on FOR_COND_PREP if non-NULL
	and also use pop_stmt_list rather than do_poplevel for FOR_BODY in
	that case.  Call set_one_cleanup_loc.
	* constexpr.cc (cxx_eval_loop_expr): Handle
	{WHILE,FOR}_COND_{PREP,CLEANUP}.
	(check_for_return_continue): Handle {WHILE,FOR}_COND_PREP.
	(potential_constant_expression_1): RECUR on
	{WHILE,FOR}_COND_{PREP,CLEANUP}.

2025-02-07  Marek Polacek  <polacek@redhat.com>

	PR c++/117106
	PR c++/118190
	* pt.cc (maybe_instantiate_noexcept): Give an error if the noexcept
	hasn't been parsed yet.

2025-02-07  Simon Martin  <simon@nasilyan.com>

	PR c++/118282
	* call.cc (add_builtin_candidate): Also check for null_ptr_cst_p
	operands.

2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118763
	* init.cc (build_new_1): Don't set CLEANUP_EH_ONLY.

2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118773
	* decl.cc (grokdeclarator): Use cplus_decl_attributes rather than
	decl_attributes for std_attributes on pointer and array types.

2025-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118661
	* constexpr.cc (potential_constant_expression_1): Don't diagnose
	lvalue-to-rvalue conversion of volatile lvalue if it has NULLPTR_TYPE.
	* decl2.cc (decl_maybe_constant_var_p): Return true for constexpr
	decls with NULLPTR_TYPE even if they are volatile.

2025-02-05  Simon Martin  <simon@nasilyan.com>

	PR c++/118319
	* decl.cc (grokfndecl): Inspect all friend function parameters.
	If it's not valid for them to have a default value and we're
	processing a template, set the default value to error_mark_node
	and give a hard error.

2025-02-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118671
	* call.cc (build_list_conv): For RAW_DATA_CST, call
	implicit_conversion with INTEGER_CST representing first byte instead
	of the whole RAW_DATA_CST.  If it is an optimizable trivial
	conversion, just save that to subconvs, otherwise allocate an
	artificial ck_list for all the RAW_DATA_CST bytes and create
	subsubconv for each of them.
	(convert_like_internal): For ck_list with RAW_DATA_CST, instead of
	doing all the checks for optimizable conversion just check kind and
	assert everything else, otherwise use subsubconversions instead of
	the subconversion for each element.

2025-02-04  Marek Polacek  <polacek@redhat.com>

	PR c++/117778
	* parser.cc (cp_parser_late_return_type_opt): Maybe override
	auto_is_implicit_function_template_parm_p.
	(cp_parser_parameter_declaration): Move a make_temp_override below.

2025-02-04  Marek Polacek  <polacek@redhat.com>

	PR c++/118718
	* parser.cc (warn_about_ambiguous_parse): Don't warn when a trailing
	return type is present.

2025-02-04  Simon Martin  <simon@nasilyan.com>
	    Jason Merrill  <jason@redhat.com>

	PR c++/117114
	PR c++/109918
	* class.cc (warn_hidden): Keep track of overloaded and of hidden
	base methods.
	* error.cc (location_of): Skip over conv_op_marker.

2025-02-04  Simon Martin  <simon@nasilyan.com>

	PR c++/114619
	* init.cc (build_vec_init): Properly determine whether
	digest_init has been called.

2025-02-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118719
	* lambda.cc (add_capture): Only pedwarn about capturing structured
	binding if !explicit_init_p.

2025-02-04  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/108205
	* contracts.cc (get_pseudo_contract_violation_type): Give names
	to generated FIELD_DECLs.
	(declare_handle_contract_violation): Mark contract_violation
	type as external linkage.
	(build_contract_handler_call): Ensure any builtin declarations
	created here aren't treated as attached to the current module.

2025-02-04  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/98893
	* decl.cc (start_cleanup_fn): Make name from the mangled name of
	the passed-in decl.
	(register_dtor_fn): Pass decl to start_cleanup_fn.

2025-02-03  A J Ryan Solutions Ltd  <gcc.gnu.org@ajryansolutions.co.uk>

	PR c++/118265
	* pt.cc (find_parameter_packs_r) <case TEMPLATE_PARM_INDEX>:
	Walk into the type of a parameter pack.

2025-02-03  Iain Sandoe  <iains.gcc@gmail.com>
	    Jason Merrill  <jason@redhat.com>

	PR c++/116506
	PR c++/116880
	* coroutines.cc (build_co_await): Ensure that xvalues are
	materialised.  Handle references/pointer values in awaiter
	access expressions.
	(is_stable_lvalue): New.
	* decl.cc (cxx_maybe_build_cleanup): Handle null arg.

2025-02-03  Jason Merrill  <jason@redhat.com>

	PR c++/116914
	PR c++/117231
	PR c++/118470
	PR c++/118491
	* semantics.cc (finish_for_stmt): Don't wrap the result of
	pop_stmt_list in EXPR_STMT.

2025-02-03  Richard Biener  <rguenther@suse.de>

	PR c++/79786
	* rtti.cc (emit_tinfo_decl): Fix DATA_ABI_ALIGNMENT invocation.

2025-01-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117516
	* class.cc (field_nonempty_p): Formatting fixes.  Use
	integer_zerop instead of tree_int_cst_equal with size_zero_node.
	(struct flexmems_t): Change type of first member from tree to bool.
	(find_flexarrays): Add nested_p argument.  Change pun argument type
	from tree to bool, adjust uses.  Formatting fixes.  If BASE_P or
	NESTED_P and T is RECORD_TYPE, start looking only at the last
	non-empty or array FIELD_DECL.  Adjust recursive call, set first
	if it was a nested call and found an array.
	(diagnose_invalid_flexarray, diagnose_flexarrays, check_flexarrays):
	Formatting fixes.

2025-01-31  Marek Polacek  <polacek@redhat.com>

	PR c++/117501
	* cp-gimplify.cc (cp_build_init_expr_for_ctor): New.
	(cp_fold_immediate_r): Call it.
	(cp_fold): Break out code into cp_build_init_expr_for_ctor.

2025-01-30  Patrick Palka  <ppalka@redhat.com>

	* cp-tree.h (LAMBDA_EXPR_CAPTURES_THIS_P): Remove.

2025-01-30  Iain Sandoe  <iain@sandoe.co.uk>

	PR c++/118673
	* tree.cc (lvalue_kind): Mark CONST_DECLs as mergable
	when they are also TREE_STATIC.

2025-01-30  Tobias Burnus  <tburnus@baylibre.com>

	* parser.cc (cp_finish_omp_declare_variant): Modify how append_args
	is saved internally.
	* pt.cc (tsubst_attribute): Likewise.
	(tsubst_omp_clauses): Remove C_ORT_OMP_DECLARE_SIMD from interop
	handling as no longer called for it.
	* decl.cc (omp_declare_variant_finalize_one): Update append_args
	changes; fixes for ADL input.

2025-01-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118655
	* semantics.cc (trait_expr_value) <case CPTK_IS_BOUNDED_ARRAY>: Return
	false for zero-sized arrays.

2025-01-28  Jason Merrill  <jason@redhat.com>

	PR c++/118285
	* constexpr.cc (cxx_eval_vec_init_1): Build INIT_EXPR for
	initializing a class.

2025-01-28  Jason Merrill  <jason@redhat.com>

	PR c++/118673
	* call.cc (maybe_init_list_as_array): Check for lvalue
	initializers.
	* cp-tree.h (enum cp_lvalue_kind_flags): Add clk_mergeable.
	* tree.cc (lvalue_kind): Return it.
	(non_mergeable_glvalue_p): New.
	(test_lvalue_kind): Adjust.

2025-01-28  Patrick Palka  <ppalka@redhat.com>

	PR c++/117855
	* cp-tree.h (DECL_FRIEND_CONTEXT): Exclude deduction guides.

2025-01-27  Jason Merrill  <jason@redhat.com>

	PR c++/118632
	* pt.cc (unify): Only strip conversion if deducible_expression.

2025-01-27  Simon Martin  <simon@nasilyan.com>

	PR c++/114292
	* pt.cc (for_each_template_parm_r) <INTEGER_TYPE>: Remove case
	now handled by cp_walk_subtrees.
	* tree.cc (cp_walk_subtrees): Walk the type of DECL_EXPR
	declarations, as well as the TYPE_{MIN,MAX}_VALUE of
	INTEGER_TYPEs.

2025-01-27  John David Anglin  <danglin@gcc.gnu.org>

	* module.cc: Test HAVE_MUNMAP and HAVE_MSYNC instead of
	_POSIX_MAPPED_FILES > 0.

2025-01-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/115769
	* module.cc (module_state::write_inits): Verify
	STATIC_INIT_DECOMP_{,NON}BASE_P flags and stream changes in those
	out.
	(module_state::read_inits): Stream those flags in.

2025-01-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/115769
	* cp-tree.h (STATIC_INIT_DECOMP_BASE_P): Define.
	(STATIC_INIT_DECOMP_NONBASE_P): Define.
	* decl.cc (cp_finish_decl): Mark nodes in {static,tls}_aggregates
	emitted for namespace scope structured bindings with
	STATIC_INIT_DECOMP_{,NON}BASE_P flags when needed.
	* decl2.cc (decomp_handle_one_var, decomp_finalize_var_list): New
	functions.
	(emit_partial_init_fini_fn): Use them.
	(prune_vars_needing_no_initialization): Assert
	STATIC_INIT_DECOMP_*BASE_P is not set on DECL_EXTERNAL vars to be
	pruned out.
	(partition_vars_for_init_fini): Use same priority for
	consecutive STATIC_INIT_DECOMP_*BASE_P vars and propagate
	those flags to new TREE_LISTs when possible.  Formatting fix.
	(handle_tls_init): Use decomp_handle_one_var and
	decomp_finalize_var_list functions.

2025-01-25  Simon Martin  <simon@nasilyan.com>

	PR c++/118239
	* constexpr.cc (cx_check_missing_mem_inits): Don't skip fields
	with DECL_FIELD_IS_BASE.

2025-01-25  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117827
	* init.cc (build_new_1): Pass address of a make_tree_vector ()
	initialized gc tree vector to build_vec_init and append
	build_disable_temp_cleanup to init_expr from it.

2025-01-25  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/116568
	* module.cc (trees_out::get_merge_kind): Treat all lambdas
	without a mangling scope as un-mergeable.

2025-01-25  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/116568
	* cp-tree.h (finish_concept_definition): Adjust parameters.
	(start_concept_definition): Declare.
	* module.cc (depset::hash::is_tu_local_entity): Use
	LAMBDA_EXPR_EXTRA_SCOPE to detect TU-local lambdas.
	* parser.cc (cp_parser_concept_definition): Start a lambda scope
	for concept definitions.
	* pt.cc (tsubst_lambda_expr): Namespace-scope lambdas may now
	have extra scope.
	(finish_concept_definition): Split into...
	(start_concept_definition): ...this new function.

2025-01-25  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118245
	* cp-tree.h (LAMBDA_EXPR_EXTRA_SCOPE): Adjust comment.
	* parser.cc (cp_parser_class_head): Start (and do not finish)
	lambda scope for all valid types.
	(cp_parser_class_specifier): Finish lambda scope after parsing
	members instead.
	* pt.cc (instantiate_class_template): Add lambda scoping.

2025-01-24  Marek Polacek  <polacek@redhat.com>

	PR c++/117153
	* decl2.cc (build_anon_union_vars): Use FIELD for the second operand
	of a COMPONENT_REF.

2025-01-23  Marek Polacek  <polacek@redhat.com>

	PR c++/117602
	* cp-tree.h (current_nonlambda_scope): Add a default argument.
	* lambda.cc (current_nonlambda_scope): New bool parameter.  Use it.
	* parser.cc (cp_parser_lambda_introducer): Use current_nonlambda_scope
	to check if the lambda is non-local.

2025-01-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118590
	* typeck.cc (build_omp_array_section): If array_expr is type dependent
	or a TYPE_DECL, build OMP_ARRAY_SECTION with NULL type.

2025-01-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118604
	* parser.cc (cp_parser_omp_metadirective): Test !default_p
	first and use strcmp () != 0 rather than !strcmp () == 0.

2025-01-23  Nathaniel Shead  <nathanieloshead@gmail.com>

	* mangle.cc (write_expression): Update mangling for lambdas.

2025-01-23  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/107741
	* cp-tree.h (start_initialized_static_member): Declare.
	(finish_initialized_static_member): Declare.
	* decl2.cc (start_initialized_static_member): New function.
	(finish_initialized_static_member): New function.
	* lambda.cc (record_lambda_scope): Support falling back to old
	ABI (maybe with warning).
	* parser.cc (cp_parser_member_declaration): Build decl early
	when parsing an initialized static data member.

2025-01-23  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118582
	* module.cc (trees_out::decl_value): Always stream
	imported_temploid_friends information.
	(trees_in::decl_value): Likewise.

2025-01-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/115769
	* decl.cc: Partially implement CWG 2867 - Order of initialization
	for structured bindings.
	(cp_finish_decl): If need_decomp_init, for function scope structure
	binding bases, temporarily clear stmts_are_full_exprs_p before
	calling expand_static_init, after it call cp_finish_decomp and wrap
	code emitted by both into maybe_cleanup_point_expr_void and ensure
	cp_finish_decomp isn't called again.

2025-01-22  Marek Polacek  <polacek@redhat.com>

	PR c++/118396
	* constexpr.cc (cxx_eval_outermost_constant_expr): Add an error call
	when !allow_non_constant.

2025-01-22  Simon Martin  <simon@nasilyan.com>

	PR c++/118199
	* typeck2.cc (split_nonconstant_init_1): Clear
	TARGET_EXPR_ELIDING_P if we need to use a copy constructor
	because of __no_unique_address__.

2025-01-22  Jakub Jelinek  <jakub@redhat.com>

	* parser.cc (cp_parser_objc_message_args): Use tree_cons with
	nreverse at the end for both sel_args and addl_args, instead of
	chainon with build_tree_list second argument.

2025-01-22  Jakub Jelinek  <jakub@redhat.com>

	* call.cc (add_list_candidates): Use append_ctor_to_tree_vector.

2025-01-22  Patrick Palka  <ppalka@redhat.com>

	PR c++/116756
	* lambda.cc (lambda_expr_this_capture): Call
	retrieve_local_specialization on the result of
	LAMBDA_EXPR_THIS_CAPTURE for a generic lambda.
	* parser.cc (cp_parser_lambda_expression): Don't clear
	LAMBDA_EXPR_THIS_CAPTURE.
	* pt.cc (tsubst_stmt) <case DECL_EXPR>: Don't overwrite
	LAMBDA_EXPR_THIS_CAPTURE with the specialized capture.
	(tsubst_lambda_expr): Don't clear LAMBDA_EXPR_THIS_CAPTURE
	afterward.

2025-01-21  Andrew Pinski  <quic_apinski@quicinc.com>

	PR c++/118525
	* cp-gimplify.cc (cp_fold): Check operands of unary, binary, cond/vec_cond
	and array_ref for error_mark before checking if the operands had changed.

2025-01-21  Jakub Jelinek  <jakub@redhat.com>

	PR objc++/118586
	* parser.cc (cp_parser_objc_message_args): Handle CPP_EMBED.

2025-01-21  Marek Polacek  <polacek@redhat.com>

	PR c++/118396
	PR c++/118523
	* constexpr.cc (cxx_eval_outermost_constant_expr): For non-simple
	TARGET_EXPRs, return ctx.ctor rather than the result of
	cxx_eval_constant_expression.  If TYPE and the type of R don't
	match, return the original expression.

2025-01-21  Simon Martin  <simon@nasilyan.com>

	PR c++/118225
	* typeck.cc (build_class_member_access_expr): Let errors that
	that have been reported go through.

2025-01-21  Jakub Jelinek  <jakub@redhat.com>

	* parser.cc (cp_lexer_new_main): Attempt to optimize large sequences
	of CPP_NUMBER with int type and values 0-255 separated by CPP_COMMA
	into CPP_EMBED with RAW_DATA_CST u.value.

2025-01-21  Jakub Jelinek  <jakub@redhat.com>

	* cp-objcp-common.cc (names_builtin_p): Return 1 for RID_VA_ARG.

2025-01-21  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118532
	* call.cc (add_list_candidates): Handle RAW_DATA_CST among init_list
	elts.
	* error.cc (dump_expr_init_vec): Handle RAW_DATA_CST among v elts.

2025-01-20  Nathaniel Shead  <nathanieloshead@gmail.com>

	* parser.cc (cp_parser_decomposition_declaration): Check linkage
	of structured bindings in modules.
	* tree.cc (decl_linkage): Structured bindings don't necessarily
	have no linkage.

2025-01-20  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118101
	* module.cc (trees_in::decl_value): Use structural equality when
	deduping partial specs with mismatching canonical types.

2025-01-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118513
	* decl2.cc (copy_linkage): If not TREE_PUBLIC, also set
	DECL_INTERFACE_KNOWN, assert it was set on decl and copy
	DECL_NOT_REALLY_EXTERN flags.

2025-01-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118534
	* constexpr.cc (find_array_ctor_elt): Don't return i early if
	i == end - 1 and the last elt's value is RAW_DATA_CST.

2025-01-17  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118049
	* module.cc (trees_in::is_matching_decl): Propagate
	FNDECL_USED_AUTO as well.

2025-01-17  Tobias Burnus  <tburnus@baylibre.com>

	PR fortran/118321
	* decl.cc (omp_declare_variant_finalize_one): Shift adjust_args index
	by one for non-static class function's 'this' pointer.

2025-01-17  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/118147
	* parser.cc (cp_parser_cache_defarg): Don't error when
	CPP_PRAGMA_EOL.

2025-01-17  Simon Martin  <simon@nasilyan.com>

	PR c++/118255
	* name-lookup.cc (pushdecl): Don't call check_template_shadow
	for hidden bindings.

2025-01-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/105440
	* constexpr.cc (cxx_eval_call_expression): If any RESULT_DECLs get
	replaced in the call result, try further evaluating the result.

2025-01-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/107522
	* constraint.cc (get_normalized_constraints_from_decl): Use the
	most general template for an explicit specialization of a
	member template.

2025-01-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/118454
	* cp-tree.h (STF_KEEP_INJ_CLASS_NAME): Define.
	* pt.cc (iterative_hash_template_argument) <case tcc_type>:
	Clarify comment for when we'd see an alias template
	specialization here.
	(coerce_template_parms): Strip typedefs (except for
	injected-class-names) in the pack expansion early break cases
	that defer coercion.
	* tree.cc (strip_typedefs): Don't strip an injected-class-name
	if STF_KEEP_INJ_CLASS_NAME is set.

2025-01-16  Patrick Palka  <ppalka@redhat.com>

	PR c++/116417
	* cp-tree.h (finish_pseudo_destructor_expr): Add complain
	parameter.
	* parser.cc (cp_parser_postfix_dot_deref_expression): Pass
	complain=tf_warning_or_error to finish_pseudo_destructor_expr.
	* pt.cc (tsubst_expr): Pass complain to
	finish_pseudo_destructor_expr.
	* semantics.cc (finish_pseudo_destructor_expr): Check complain
	before emitting a diagnostic.

2025-01-16  Simon Martin  <simon@nasilyan.com>

	PR c++/117775
	* decl.cc (fold_sizeof_expr): Make sure the folded result has
	type size_type_node.

2025-01-16  Sandra Loosemore  <sloosemore@baylibre.com>

	* parser.cc (cp_parser_omp_assumption_clauses): Give a more specific
	error message for invalid directives vs unknown names.

2025-01-16  Sandra Loosemore  <sloosemore@baylibre.com>

	* decl2.cc (cplus_decl_attributes): Don't add "omp declare target
	block".

2025-01-16  Sandra Loosemore  <sloosemore@baylibre.com>
	    Kwok Cheung Yeung  <kcy@codesourcery.com>
	    Sandra Loosemore  <sandra@codesourcery.com>

	PR middle-end/112779
	PR middle-end/113904
	* cp-tree.h (struct saved_scope): Add new field
	x_processing_omp_trait_property_expr.
	(processing_omp_trait_property_expr): New.
	* parser.cc (cp_parser_skip_to_end_of_block_or_statement): Add
	metadirective_p	parameter and handle skipping over the parentheses
	in a "for" statement.
	(struct omp_metadirective_parse_data): New.
	(mangle_metadirective_region_label): New.
	(cp_parser_label_for_labeled_statement): Mangle label names in a
	metadirective body.
	(cp_parser_jump_statement): Likewise.
	(cp_parser_omp_context_selector): Allow arbitrary expressions in
	device_num and condition properties.
	(cp_parser_omp_assumption_clauses): Handle C_OMP_DIR_META.
	(analyze_metadirective_body): New.
	(cp_parser_omp_metadirective): New.
	(cp_parser_pragma): Handle PRAGMA_OMP_METADIRECTIVE.
	* parser.h (struct cp_parser): Add omp_metadirective_state field.
	* pt.cc (tsubst_omp_context_selector): New.
	(tsubst_stmt): Handle OMP_METADIRECTIVE.
	* semantics.cc (finish_id_expression_1): Don't diagnose use of
	parameter outside function body in dynamic selector expressions here.

2025-01-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118214
	* decl.cc (struct reshape_iter): Add raw_idx member.
	(cp_maybe_split_raw_data): Add inc_cur parameter, set *inc_cur,
	don't modify original CONSTRUCTOR, use d->raw_idx to track index
	into a RAW_DATA_CST d->cur->value.
	(consume_init): Adjust cp_maybe_split_raw_data caller, increment
	d->cur when cur_inc is true.
	(reshape_init_array_1): Don't modify original CONSTRUCTOR when
	handling RAW_DATA_CST d->cur->value and !reuse, instead use
	d->raw_idx to track index into RAW_DATA_CST.
	(reshape_single_init): Initialize iter.raw_idx.
	(reshape_init_class): Adjust for introduction of d->raw_idx,
	adjust cp_maybe_split_raw_data caller, do d->cur++ if inc_cur
	rather than when it returns non-NULL.
	(reshape_init_r): Check for has_designator_problem for second
	half of _Complex earlier, also check for
	error_operand_p (d->cur->value).  Use consume_init instead of
	cp_maybe_split_raw_data with later conditional d->cur++.
	(reshape_init): Initialize d.raw_idx.

2025-01-16  Jakub Jelinek  <jakub@redhat.com>

	* parser.cc (cp_parser_lambda_declarator_opt,
	cp_parser_statement, cp_parser_selection_statement,
	cp_parser_jump_statement): Use -std=c++23 and -std=gnu++23
	in diagnostics rather than -std=c++2b and -std=gnu++2b.
	* semantics.cc (finish_compound_literal): Likewise.
	* typeck2.cc (build_functional_cast_1): Likewise.
	* decl.cc (start_decl): Likewise.
	* constexpr.cc (ensure_literal_type_for_constexpr_object,
	potential_constant_expression_1): Likewise.

2025-01-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118390
	* cp-tree.h (count_ctor_elements): Declare.
	* call.cc (count_ctor_elements): No longer static.
	* pt.cc (unify): Use count_ctor_elements instead of
	CONSTRUCTOR_NELTS.

2025-01-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118278
	* mangle.cc (write_expression): Handle RAW_DATA_CST.

2025-01-15  Marek Polacek  <polacek@redhat.com>

	PR c++/118139
	* cxx-pretty-print.cc (pp_cxx_nested_name_specifier): Handle
	a computed-type-specifier.

2025-01-15  Tobias Burnus  <tburnus@baylibre.com>

	PR c++/118486
	* decl.cc (omp_declare_variant_finalize_one): When resolving
	the variant to use, handle variant calls with TARGET_EXPR.

2025-01-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118387
	* method.cc (build_comparison_op): Set bad if
	std::strong_ordering::equal doesn't convert to rettype.

2025-01-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118124
	* cp-tree.h (build_array_of_n_type): Change second argument type
	from int to unsigned HOST_WIDE_INT.
	* tree.cc (build_array_of_n_type): Likewise.
	* call.cc (count_ctor_elements): New function.
	(maybe_init_list_as_array): Use it instead of CONSTRUCTOR_NELTS.
	(convert_like_internal): Use length from init's type instead of
	len when handling the maybe_init_list_as_array case.

2025-01-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118124
	* call.cc (convert_like_internal): Handle RAW_DATA_CST in
	ck_list handling.  Formatting fixes.

2025-01-14  Marek Polacek  <polacek@redhat.com>

	PR c++/118047
	PR c++/118355
	* typeck2.cc (massage_init_elt): Call fold_non_dependent_init
	unless for a CONSTRUCTOR in a template.

2025-01-14  Sandra Loosemore  <sloosemore@baylibre.com>
	    Kwok Cheung Yeung  <kcy@codesourcery.com>
	    Sandra Loosemore  <sandra@codesourcery.com>
	    Marcel Vollweiler  <marcel@codesourcery.com>

	PR middle-end/114596
	PR middle-end/112779
	PR middle-end/113904
	* decl.cc (omp_declare_variant_finalize_one): Update for changes
	to omp-general.h interfaces.
	* parser.cc (cp_finish_omp_declare_variant): Likewise.

2025-01-14  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/117397
	* module.cc (depset::hash::add_deduction_guides): Don't emit
	imported deduction guides.
	(depset::hash::finalize_dependencies): Add check for any
	bindings referring to imported entities.

2025-01-14  Andrew Pinski  <quic_apinski@quicinc.com>

	PR c++/118445
	* constexpr.cc (cxx_eval_constant_expression): Handle VEC_DUPLICATE like
	a "normal" unary operator.
	(potential_constant_expression_1): Likewise.

2025-01-11  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/114630
	* module.cc (trees_in::core_vals) <BLOCK>: Chain a new node if
	DECL_CHAIN already is set.

2025-01-11  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::type_node): Write attributes for
	tt_derived_type, not tt_variant_type.
	(trees_in::tree_node): Likewise for reading.

2025-01-11  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_in::decl_value): Merge attributes.

2025-01-10  Paul-Antoine Arras  <parras@baylibre.com>

	* parser.cc (cp_parser_pragma): Replace call to cp_parser_omp_dispatch
	with cp_parser_omp_construct and check context.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118387
	* method.cc (genericize_spaceship): For tag == cc_last if
	type is not auto just return error_mark_node instead of failing
	checking assertion.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::core_bools): Write replaceable_operator.
	(trees_in::core_bools): Read it.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	PR c++/117937
	* pt.cc (tsubst_pack_index): tsubst the pack even when it's not
	PACK_EXPANSION_P.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118277
	* cp-tree.h (finish_asm_string_expression): Declare.
	* semantics.cc (finish_asm_string_expression): New function.
	(finish_asm_stmt): Use it.
	* parser.cc (cp_parser_asm_string_expression): Likewise.
	Wrap string into PAREN_EXPR in the ("") case.
	(cp_parser_asm_definition): Don't ICE if finish_asm_stmt
	returns error_mark_node.
	(cp_parser_asm_specification_opt): Revert 2024-06-24 changes.
	* pt.cc (tsubst_stmt): Don't ICE if finish_asm_stmt returns
	error_mark_node.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	* module.cc (trees_out::core_vals): Note DECL_VALUE_EXPR even for
	vars outside of functions.
	(trees_in::core_vals): Read in DECL_VALUE_EXPR even for vars outside
	of functions.
	(trees_out::get_merge_kind): Make DECL_DECOMPOSITION_P MK_unique.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* error.cc (cxx_initialize_diagnostics): Improve comment.
	* module.cc (modules): Improve comment.
	(get_originating_module): Add function comment.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::write_function_def): Write returns* flags.
	(struct post_process_data): Add returns_* flags.
	(trees_in::read_function_def): Set them.
	(module_state::read_cluster): Use them.

2025-01-09  Jason Merrill  <jason@redhat.com>

	* decl.cc (check_redeclaration_exception_specification): Be more
	lenient about ::operator new.

2025-01-09  Jason Merrill  <jason@redhat.com>
	    Torbjörn SVENSSON  <torbjorn.svensson@foss.st.com>

	PR c/116060
	* call.cc (standard_conversion): Preserve type name in ck_identity.
	(maybe_adjust_type_name): New.
	(convert_like_internal): Use it.
	Handle -Wsuggest-attribute=format here.
	(convert_for_arg_passing): Not here.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/118060
	* constraint.cc (tsubst_valid_expression_requirement): Don't
	check convert_to_void during partial substitution.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117887
	* pt.cc (instantiate_template): Set tf_partial if arguments are
	dependent.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (potential_constant_expression_1) <case CAST_EXPR>:
	Fix check for class conversion to literal type to properly look
	through the TREE_LIST operand of a CAST_EXPR.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (cxx_eval_constant_expression) <default>:
	Relax ICE when encountering an unexpected tree code into a
	checking ICE guarded by flag_checking.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117993
	* search.cc (any_dependent_bases_p): Recurse into bases (of
	dependent type) that are not BINFO_DEPENDENT_BASE_P.  Document
	default argument.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117792
	* pt.cc (type_dependent_expression_p): Consider the dependence
	of the address of each template argument of a function
	template-id.

2025-01-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117825
	* typeck.cc (cp_build_function_call_vec): Don't call
	check_function_arguments if complain doesn't have tf_warning bit set.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (build_nop): Add CXX_MEM_STAT_INFO.
	* typeck.cc (build_nop): Add MEM_STAT_DECL.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (implicit_conversion): Check that FROM isn't a reference
	if we also got an EXPR argument.
	(convert_like_internal): Check that EXPR isn't a reference.
	(can_convert_arg): convert_from_reference if needed.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* method.cc (is_stub_object): New.
	* cp-tree.h (is_stub_object): Declare.
	* error.cc (dump_expr): Use it.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (convert_like_internal): Add missing break.
	* coroutines.cc (cp_coroutine_transform::build_ramp_function): Build
	INIT_EXPR directly.
	* decl.cc (omp_declare_variant_finalize_one): Use build_stub_object.

2025-01-08  Marek Polacek  <polacek@redhat.com>

	PR c++/118169
	* typeck2.cc (split_nonconstant_init): Call finish_expr_stmt instead
	of add_stmt.

2025-01-03  Tobias Burnus  <tburnus@baylibre.com>

	* parser.cc (cp_parser_omp_var_list_no_open,
	cp_parser_omp_var_list): For kind=0 (= OMP_CLAUSE_ERROR),
	store also the expression location in the tree list.
	(cp_parser_oacc_data_clause_deviceptr,
	cp_finish_omp_declare_variant): Use that location instead or
	input_location/the before-parsing location.
	* semantics.cc (finish_omp_threadprivate): Likewise.

2025-01-02  Paul-Antoine Arras  <parras@baylibre.com>

	* parser.cc (cp_parser_omp_dispatch): Handle INDIRECT_REF.


Copyright (C) 2025 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

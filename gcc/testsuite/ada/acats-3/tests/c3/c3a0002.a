-- C3A0002.A
--
--                             Grant of Unlimited Rights
--
--     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,
--     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained 
--     unlimited rights in the software and documentation contained herein.
--     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making 
--     this public release, the Government intends to confer upon all 
--     recipients unlimited rights  equal to those held by the Government.  
--     These rights include rights to use, duplicate, release or disclose the 
--     released technical data and computer software in whole or in part, in 
--     any manner and for any purpose whatsoever, and to have or permit others 
--     to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED 
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE 
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--*
--
-- OBJECTIVE:
--      Check that access to subprogram type can be used to select and 
--      invoke procedures with appropriate arguments dynamically.
--
-- TEST DESCRIPTION:
--      Declare an access to procedure type in a package specification.  
--      Declare three different log procedures that can be referred to by 
--      the access to procedure type.  
-- 
--      In the main program, call each procedure indirectly by dereferencing 
--      the access value.
-- 
--
-- CHANGE HISTORY:
--      06 Dec 94   SAIC    ACVC 2.0
--      05 APR 96   SAIC    RM reference change for 2.1
--
--
--!


package C3A0002_0 is

   TC_Call_Tag : Natural := 0;

   Return_Num          : Float   := 0.0;

   -- Type accesses to any log procedure
   type Log_Procedure_Ptr is access procedure   
      (Angle : in Float);

   procedure Log_Calc_Fast  (Angle : in Float);         

   procedure Log_Calc_Acc   (Angle : in Float);        

   procedure Log_Calc_Table (Angle : in Float);

end C3A0002_0;


-----------------------------------------------------------------------------


package body C3A0002_0 is

   procedure Log_Calc_Fast (Angle : in Float) is
   begin
      TC_Call_Tag := 1;
      Return_Num := Angle;
   end Log_Calc_Fast;


   procedure Log_Calc_Acc (Angle : in Float) is
   begin
      TC_Call_Tag  := 2;
      Return_Num := Angle;
   end Log_Calc_Acc;


   procedure Log_Calc_Table (Angle : in Float) is
   begin
      TC_Call_Tag := 3;
      Return_Num := Angle;
   end Log_Calc_Table;

end C3A0002_0;

-----------------------------------------------------------------------------

with Report;
with C3A0002_0; 

procedure C3A0002 is

   Log_Access : C3A0002_0.Log_Procedure_Ptr;
   Theta      : Float := 0.0;

begin

   Report.Test ("C3A0002", "Check that access to subprogram type can be "
                         & "used to select and invoke procedures with "
                         & "appropriate arguments dynamically" );

   Log_Access := C3A0002_0.Log_Calc_Fast'Access;

   -- Invoking Log procedure designated by access value
   Log_Access (Theta);

   If C3A0002_0.TC_Call_Tag /= 1 or C3A0002_0.Return_Num /= 0.0 then
      Report.Failed ("Incorrect Log_Calc_Fast result");
   end if;

   Theta := 1.0;

   Log_Access := C3A0002_0.Log_Calc_Acc'Access;

   -- Invoking Log procedure designated by access value
   Log_Access (Theta);

   If C3A0002_0.TC_Call_Tag /= 2 or C3A0002_0.Return_Num /= 1.0 then
      Report.Failed ("Incorrect Log_Calc_Acc result");
   end if;

   Theta := -1.0;

   Log_Access := C3A0002_0.Log_Calc_Table'Access;

   -- Invoking Log procedure designated by access value
   Log_Access (Theta);

   If C3A0002_0.TC_Call_Tag /= 3 or C3A0002_0.Return_Num /= -1.0 then
      Report.Failed ("Incorrect Log_Calc_Table result");
   end if;

   Report.Result;

end C3A0002;

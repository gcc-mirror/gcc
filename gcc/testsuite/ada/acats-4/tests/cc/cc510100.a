-- CC510100.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--      Check that a generic unit with a tagged incomplete formal type can be
--      instantiated with an incomplete view of a type from a limited withed
--      package, and that operations in the instance can be used normally when
--      the full view of the type is visible.
--
-- TEST DESCRIPTION:
--      A generic package (CC51010_0), modeling a limited type map container,
--      is declared with a formal tagged incomplete type parameter and several
--      operations with parameters or results of the formal incomplete type.
--      A set of integer abstraction is defined in a package (CC51010_1).
--      (Note: We use Integer for the set elements here for simplicity;
--      a real example would use some type that included a set in some
--      fashion so that a limited with was required.)
--      The set abstraction is then limited withed into a package
--      specification (CC51010_2), and the map is instantiated.
--      In the body of that package (which has a full with of the set
--      abstraction), we test that the map operations work as expected.
--
--  SPECIAL REQUIREMENTS:
--      To build this test:
--         1) Do the steps required to add the limited view of the file
--            CC510102 to the compilation environment. (Careful: the
--            compilation of the normal view of the file CC510102 should
--            not be done at this time.)
--         2) Compile the file CC510100 (and add the results to the
--            environment).
--         3) Compile the file CC510101 (and add the results to the
--            environment).
--         4) Compile the file CC510102 (and add the results to the
--            environment).
--         5) Compile the file CC510103 (and add the results to the
--            environment).
--         6) Build an executable image and run it.
--
--  TEST FILES:
--      This test consists of the following files:
--      -> CA120010.A
--         CA120011.A
--         CA120012.A
--         CA120013.AM
--
--
-- CHANGE HISTORY:
--      02 Jan 2015   RLB     Created test after failed attempt to create
--                            version of CC51009.
--      05 Jan 2015   RLB     Corrected a couple of test errors.
--      06 Jan 2015   RLB     Split test into separate files.
--      17 Mar 2015   RLB     Added access to formal since
--                            Elem'Unchecked_Access is illegal when Elem
--                            is incomplete.
--      19 Mar 2015   RLB     Made parameter in out.
--
--!

package CC51010_0 is

   generic
      type Key_Type is private;
      with function "=" (A, B : Key_Type) return Boolean is <>;
      type Element_Type is tagged;
      with function Access_To (Obj : in out Element_Type)
                                          return access Element_Type;
   package Incomplete_Map is

      -- This Map package will store any tagged variable (including limited
      -- variables). The variable object itself will continue to live wherever
      -- it originally was declared. It is the user's responsibility to ensure
      -- that the map does not outlive any of the elements stored within it.

      type Map_Type is private;

      procedure Insert (Map  : in out Map_Type;
                        Elem : in out Element_Type;
                        Key  : in Key_Type);

      function Element (Map : in Map_Type;
                        Key : in Key_Type) return access Element_Type;

   private
       type Element_Access is access all Element_Type;
       type Pair is record
          The_Key     : Key_Type;
          The_Element : Element_Access;
       end record;
       type Pairs is array (Positive range <>) of Pair;
       type Map_Type is record
          Items : Natural := 0;
          Data  : Pairs(1..10);
       end record;
   end Incomplete_Map;

   -- Note that tagged incomplete types can be parameters but not results
   -- on subprogram bodies (3.10.1(8.4/3)), and that objects of a tagged
   -- incomplete view can be parameters in non-dispatching calls. Thus
   -- a body is possible here.

end CC51010_0;


     --==================================================================--


package body CC51010_0 is

   package body Incomplete_Map is

      procedure Insert (Map  : in out Map_Type;
                        Elem : in out Element_Type;
                        Key  : in Key_Type) is
      begin
         -- Simplistic implementation to show proof-of-concept.
         Map.Items := Map.Items + 1;
         Map.Data(Map.Items) := (The_Key => Key,
                                 The_Element => Access_To (Elem));
           -- Will raise Constraint_Error if full.
      end Insert;


      function Element (Map : in Map_Type;
                        Key : in Key_Type) return access Element_Type is
      begin
         for I in 1 .. Map.Items loop
            if Map.Data(I).The_Key = Key then
               return Map.Data(I).The_Element;
            end if;
         end loop;
         return null;
      end Element;

   end Incomplete_Map;

end CC51010_0;



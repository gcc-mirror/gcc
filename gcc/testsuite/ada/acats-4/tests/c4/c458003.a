--  C458003.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--  OBJECTIVES:
--
--     (A) Check that result of a quantified expression with a
--         loop_parameter_specification is True if the predicate is True for
--         all values if the quantifier is all and any value if the quantifier
--         is some, and is False otherwise. (False result cases).
--
--     (B) Check that if the quantifier is all, the result of a quantified
--         expression is True if there are no values in the domain.
--
--     (C) Check that if the quantifier is some, the result of a quantified
--         expression is False if there are no values in the domain.
--
--     (D) Check that any exceptions propagated by the predicate of a
--         quantified expression with a quantifier of all is propagated by the
--         quantified expression.
--
--     (E) Check that any exceptions propagated by the predicate of a
--         quantified expression with a quantifier of some is propagated by the
--         quantified expression.
--
--  HISTORY:
--     BJM 12/28/11  Created original test.
--     RLB  3/24/14  Changed name, additional objectives, and four test cases.
--     BJM  5/08/22  Added tests for when there are no values in the domain.
--     RLB  6/29/22  Split new cases into separate test.
--     RLB  6/30/22  Removed stray Ada 2022 features.
--!

with Report; use Report;

procedure C458003 is

   type Direction  is (Forward, Backward);

   Test_Error : exception;

   Test_Array : constant array (1 .. 10) of Integer := 
                                         (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
   Empty_Array : constant array (1 .. 0) of Integer := (others => <>);

   TC_Last_Check : Natural := Test_Array'First - 1;

   function Succession_Check
     (X                   : Integer;
      Iteration           : Direction;
      Result              : Boolean;
      Propagate_Exception : Boolean := False) return Boolean is
   begin

      if Iteration = Forward then
         if Natural'Succ (TC_Last_Check) /= X then
            Failed ("Expression evaluated out of order");
         end if;
      else
         if Natural'Pred (TC_Last_Check) /= X then
            Failed ("Expression evaluated out of order");
         end if;
      end if;

      if Test_Array (X) /= X then
         Failed ("Unexpected array value");
      end if;

      if Propagate_Exception then
         raise Test_Error with "Test Exception Propagation: X=" & X'Image;
      end if;

      TC_Last_Check := X;

      return Result;
   end Succession_Check;

begin --  C458003
   Test
     ("C458003",
      "Check that the predicate of a quantified expression " &
      "is evaluated in the order specified by the " &
      "loop_parameter_specification");

   TC_Last_Check := Test_Array'First - 1;

   Objective_A_All_False_Forward :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_A_All_False_Forward

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for all I in Test_Array'Range =>
           Succession_Check (I, Forward, Result => False));

      if Expression_Value then
         Failed ("Wrong value for quantified expression - 1");
      end if;

      if TC_Last_Check /= Test_Array'First then
         Failed ("Unexpected value for last evaluated expression - 1");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 1");
   end Objective_A_All_False_Forward;

   TC_Last_Check := Test_Array'Last + 1;

   Objective_A_All_False_Reverse :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_A_All_False_Forward

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for all I in reverse Test_Array'Range =>
           Succession_Check (I, Backward, Result => False));

      if Expression_Value then
         Failed ("Wrong value for quantified expression - 2");
      end if;

      if TC_Last_Check /= Test_Array'Last then
         Failed ("Unexpected value for last evaluated expression - 2");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 2");
   end Objective_A_All_False_Reverse;

   Objective_B_None_Forward :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_B_None_Forward

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for all I in Empty_Array'Range =>
           Succession_Check (I, Forward, Result => False));

      if not Expression_Value then
         Failed ("Wrong value for quantified expression - 3");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 3");
   end Objective_B_None_Forward;

   Objective_B_None_Reverse :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_B_None_Reverse

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for all I in reverse Empty_Array'Range =>
           Succession_Check (I, Backward, Result => False));

      if not Expression_Value then
         Failed ("Wrong value for quantified expression - 4");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 4");
   end Objective_B_None_Reverse;

   Objective_C_None_Forward :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_C_None_Forward

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for some I in Empty_Array'Range =>
           Succession_Check (I, Forward, Result => True));

      if Expression_Value then
         Failed ("Wrong value for quantified expression - 5");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 5");
   end Objective_C_None_Forward;

   Objective_C_None_Reverse :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_C_None_Reverse

      --  Forward iteration to check one element exists, but none do.
      Expression_Value :=
        (for some I in reverse Empty_Array'Range =>
           Succession_Check (I, Backward, Result => True));

      if Expression_Value then
         Failed ("Wrong value for quantified expression - 6");
      end if;

   exception
      when others =>
         Failed ("Unexpected exception raised - 6");
   end Objective_C_None_Reverse;

   TC_Last_Check := Test_Array'First - 1;

   Objective_D_Forward_All :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_D_Forward_All

      --  Forward iteration until exception is raised
      Expression_Value :=
        (for all I in Test_Array'Range =>
           Succession_Check
             (I, Forward,
              Result => True,
              Propagate_Exception => I = 4));

      Failed ("Exception not propagated - 7");

   exception
      when Test_Error =>
         if TC_Last_Check /= 3 then
            Failed ("Wrong number of iterations - 7");
         end if;

         if Expression_Value then
            Failed ("Expression_Value should not have been modified - 7");
         end if;

      when others =>
         Failed ("Unexpected exception raised - 7");
   end Objective_D_Forward_All;

   TC_Last_Check := Test_Array'Last + 1;

   Objective_D_Reverse_All :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_D_Reverse_All

      --  Reverse iteration until exception is raised
      Expression_Value :=
        (for all I in reverse Test_Array'Range =>
           Succession_Check
             (I, Backward,
              Result => True,
              Propagate_Exception => I = 4));

      Failed ("Exception not propagated - 8");

   exception
      when Test_Error =>
         if TC_Last_Check /= 5 then
            Failed ("Wrong number of iterations - 8");
         end if;

         if Expression_Value then
            Failed ("Expression_Value should not have been modified - 8");
         end if;

      when others =>
         Failed ("Unexpected exception raised - 8");
   end Objective_D_Reverse_All;

   TC_Last_Check := Test_Array'First - 1;

   Objective_E_Forward_Some :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_E_Forward_Some

      --  Forward iteration until exception is raised
      Expression_Value :=
        (for some I in Test_Array'Range =>
           Succession_Check
             (I, Forward,
              Result => I > 4,
              Propagate_Exception => I = 4));

      Failed ("Exception not propagated - 19");

   exception
      when Test_Error =>
         if TC_Last_Check /= 3 then
            Failed ("Wrong number of iterations - 9");
         end if;

         if Expression_Value then
            Failed ("Expression_Value should not have been modified - 9");
         end if;

      when others =>
         Failed ("Unexpected exception raised - 9");
   end Objective_E_Forward_Some;

   TC_Last_Check := Test_Array'Last + 1;

   Objective_E_Reverse_Some :
   declare
      Expression_Value : Boolean := False;
   begin --  Objective_E_Reverse_Some

      --  Reverse iteration until exception is raised
      Expression_Value :=
        (for some I in reverse Test_Array'Range =>
           Succession_Check
             (I, Backward,
              Result => I < 4,
              Propagate_Exception => I = 4));

      Failed ("Exception not propagated - 10");

   exception
      when Test_Error =>
         if TC_Last_Check /= 5 then
            Failed ("Wrong number of iterations - 10");
         end if;

         if Expression_Value then
            Failed ("Expression_Value should not have been modified - 10");
         end if;

      when others =>
         Failed ("Unexpected exception raised - 10");
   end Objective_E_Reverse_Some;

   Result;

end C458003;




-- C961001.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
-- OBJECTIVE:
--      Check that the Image and Value operations of Ada.Calendar.Formatting
--      operate as expected.
--
-- CHANGE HISTORY:
--      2016-03-09 - RLB - Created in-house RRS test. (Test assumes it is run
--                         in North America.)
--      2023-06-29 - RLB - Created ACATS test without Time_Zone cases (changed
--                         by AI12-0336-1).
--
--!

with Report;
with Ada.Calendar.Formatting;

procedure C961001 is

   Summer_Time : Ada.Calendar.Time;
   Winter_Time : Ada.Calendar.Time;

   Sample : Duration;

begin

   Report.Test
     ("C961001",
      "Check that the Image and Value operations of " &
      "Ada.Calendar.Formatting operate as expected");

   Summer_Time := Ada.Calendar.Formatting.Time_Of
       (Year => 2008, Month => 8, Day => 31,
        Hour => 9, Minute => 52, Second => 0, Sub_Second => 0.0);

   Winter_Time := Ada.Calendar.Formatting.Time_Of
       (Year => 2011, Month => 2, Day => 3,
        Hour => 18, Minute => 10, Second => 20, Sub_Second => 0.0,
        Leap_Second => False);

   if Ada.Calendar.Formatting.Image (Summer_Time) /=
       "2008-08-31 09:52:00" then
       Report.Failed ("Time image incorrect - " &
          Ada.Calendar.Formatting.Image (Summer_Time) &
             "; expected 2008-08-31 09:52:00");
   end if;

   if Ada.Calendar.Formatting.Image (Duration(6666.125),
      Include_Time_Fraction => True) /= "01:51:06.12" then
       -- No rounding of the fraction!!
       Report.Failed ("Duration image incorrect - " &
          Ada.Calendar.Formatting.Image (Duration(6666.125),
             Include_Time_Fraction => True) & "; expected 01:51:06.12");
   end if;

   Winter_Time := Ada.Calendar.Formatting.Value ("2016-03-10 01:45:30.50");
   if Ada.Calendar.Formatting.Year (Winter_Time) /= 2016 or else
      Ada.Calendar.Formatting.Month (Winter_Time) /= 3 or else
      Ada.Calendar.Formatting.Hour (Winter_Time) /= 1 or else
      Ada.Calendar.Formatting.Minute (Winter_Time) /= 45 then
       Report.Failed ("Wrong time value - " &
          Ada.Calendar.Formatting.Image (Winter_Time,
            Include_Time_Fraction => True) &
            "; expected 2016-03-10 01:45:30.50");
   end if;

   if 115924.0 > Float(Duration'Last) then
      Report.Comment ("Can't test Duration Value, " &
                      "unusually small range for Duration");
   else   
      Sample := 112206.0;
      if Ada.Calendar.Formatting.Image (Sample) /= "31:10:06" then
          Report.Failed ("Wrong result for Duration Image - " &
             Ada.Calendar.Formatting.Image (Sample) & "; expected 31:10:06");
      end if;
      
      begin
         Sample := Ada.Calendar.Formatting.Value ("32:12:04");
         if Sample /= 115924.0 then
            Report.Failed ("Wrong result for Duration Value - " &
               Duration'Image (Sample) & "; expected 115924.0");
         end if;
      exception
         when Constraint_Error =>
             Report.Failed ("Unexpected Constraint_Error from Duration Value");
      end;
   end if;

   begin
      Sample := Ada.Calendar.Formatting.Value ("04:87:12");
      Report.Failed ("No exception for out-of-range minutes");
   exception
      when Constraint_Error =>
         null; -- Expected.
   end;

   begin
      Winter_Time := Ada.Calendar.Formatting.Value ("2003-16-10 01:59:00");
      Report.Failed ("No exception for out-of-range month");
   exception
      when Constraint_Error =>
         null; -- Expected.
   end;

   begin
      Winter_Time := Ada.Calendar.Formatting.Value ("2003-03-32 01:59:00");
      Report.Failed ("No exception for out-of-range day");
   exception
      when Constraint_Error =>
         null; -- Expected.
   end;

   begin
      Winter_Time := Ada.Calendar.Formatting.Value ("2003-03-12 01:59:60");
      Report.Failed ("No exception for out-of-range seconds");
   exception
      when Constraint_Error =>
         null; -- Expected.
   end;

   begin
      Winter_Time := Ada.Calendar.Formatting.Value ("2003-03-12 24:59:00");
      Report.Failed ("No exception for out-of-range hour");
   exception
      when Constraint_Error =>
         null; -- Expected.
   end;

   Report.Result;

end C961001;

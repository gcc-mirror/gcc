-- CD30007.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--      Check that the implementation supports specifying Sizes for
--      types, including full types for private types, using aspect
--      specifications.
--
-- TEST DESCRIPTION:
--      This test is loosely based on existing tests CD2A21C, CD2A22E,
--      and CD2A31C, as our primary purpose is to test aspect specifications
--      rather than the aspect Size. We make the some of the
--      same requirements as in those tests in order to ensure that the aspect
--      is actually implemented rather than ignored.
--
--      The test tries using constants declared after the aspect
--      specifications as the aspects are not supposed to be evaluated
--      until the freezing point of the entities. Note that in this
--      case, there is no need for declaring these constants later,
--      but in real programs this feature can be critical.
--
--      The test defines several types in package specifications and
--      attempts to specify aspect Size for all of them. It then uses
--      instances of Length_Check to ensure that the aspect Size is
--      actually as specified.
--
--      Note that we assign this test to 13.3 (where the Size attribute is
--      defined) rather than 13.1.1(31/3) which states that we can specify
--      representation attributes this way. Since 13.1.1(31/3) is a blanket
--      applying to a large number of attributes, it is less interesting
--      than the details of the aspect itself.
--
-- APPLICABILITY CRITERIA:
--      All implementations must attempt to compile this test.
--
--      For implementations validating against Systems Programming Annex (C):
--        this test must execute and report PASSED.
--
--      For implementations not validating against Annex C:
--        this test may report compile time errors at one or more points
--        indicated by "-- ANX-C RQMT", in which case it may be graded as
--        inapplicable. Otherwise, the test must execute and report PASSED.
--
-- CHANGE HISTORY:
--      27 Sep 13   RLB    Created test from CD2A21C, CD2A22E, and CD2A31C.
--      27 Nov 13   RLB    Added missing applicability criteria and messages.
--      20 Mar 14   RLB    Readied to issue; minor changes to comments.
--      13 Mar 15   RLB    Eliminated overlong lines.
--!

----------------------------------------------------------------- CD30007_0

package CD30007_0 is

   -- Contains basic declarations.

   type Basic_Enum is (A, B, C, D, E);
   Specified_Enum_Size : constant := Basic_Enum'Size;

   type Basic_Int is range -60 .. 80;
   Specified_Int_Size : constant := 9;

end CD30007_0;

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- there is no package body CD30007_0

----------------------------------------------------------------- CD30007_1

with CD30007_0;
package CD30007_1 is

   -- Contains types to check.

   type Check_Enum_Type is (Zero, One, Two)
      with Size => Smallest_Unsigned_Enum_Size;            -- ANX-C RQMT.

   type Check_Int_Type is range -63 .. 63
      with Size => Smallest_Signed_Int_Size;               -- ANX-C RQMT.

   type Check_Mod_Type is mod 256
      with Size => Smallest_Unsigned_Mod_Size;             -- ANX-C RQMT.

   type Derived_Enum is new CD30007_0.Basic_Enum
      with Size => CD30007_0.Specified_Enum_Size;          -- ANX-C RQMT.

   type Derived_Int is new CD30007_0.Basic_Int
      with Size => CD30007_0.Specified_Int_Size;           -- ANX-C RQMT.

   type Pack_Enum is (A1, B1, C1, D1, E1, F1, G1)
      with Size => CD30007_0.Specified_Enum_Size;          -- ANX-C RQMT.

   type Pack_Int is range -125 .. 125
      with Size => CD30007_0.Specified_Int_Size;           -- ANX-C RQMT.

   type Private_Enum is private;

   PE_Value : constant Private_Enum;

   type Private_Int is private;

   PI_Value : constant Private_Int;

   Smallest_Unsigned_Enum_Size : constant := 2;

   Smallest_Signed_Int_Size : constant := 7;

   Smallest_Unsigned_Mod_Size : constant := 8;

private

   type Private_Enum is (A2, B2, C2, D2, E2, F2, G2)
      with Size => CD30007_0.Specified_Enum_Size;          -- ANX-C RQMT.

   PE_Value : constant Private_Enum := D2;

   type Private_Int is range -125 .. 125
      with Size => CD30007_0.Specified_Int_Size;           -- ANX-C RQMT.

   PI_Value : constant Private_Int := -87;

end CD30007_1;

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- there is no package body CD30007_1

------------------------------------------------------------------- CD30007

with Report;
with Length_Check;                      -- Contains a call to 'Report.Failed'.
with CD30007_0, CD30007_1;
procedure CD30007 is

   Minimum_Enum_Size : Integer :=
      Report.Ident_Int(CD30007_0.Specified_Enum_Size);

   Minimum_Int_Size  : Integer :=
      Report.Ident_Int(CD30007_0.Specified_Int_Size);

   procedure Check_1 is new Length_Check (CD30007_1.Check_Enum_Type);
   procedure Check_2 is new Length_Check (CD30007_1.Check_Int_Type);
   procedure Check_3 is new Length_Check (CD30007_1.Check_Mod_Type);
   procedure Check_4 is new Length_Check (CD30007_1.Derived_Enum);
   procedure Check_5 is new Length_Check (CD30007_1.Derived_Int);
   procedure Check_6 is new Length_Check (CD30007_1.Pack_Enum);
   procedure Check_7 is new Length_Check (CD30007_1.Pack_Int);
   procedure Check_8 is new Length_Check (CD30007_1.Private_Enum);
   procedure Check_9 is new Length_Check (CD30007_1.Private_Int);

   use type CD30007_1.Check_Int_Type;

begin

   Report.Test ("CD30007", "Check that the implementation supports " &
                           "specifying Sizes for types, including full " &
                           "types for private types, using aspect " &
                           "specifications");
   Check_1 (CD30007_1.Two,
            CD30007_1.Smallest_Unsigned_Enum_Size,
            "Check_Enum_Type");
   Check_2 (-25, CD30007_1.Smallest_Signed_Int_Size, "Check_Int_Type");
   Check_3 (12, CD30007_1.Smallest_Unsigned_Mod_Size, "Check_Mod_Type");
   Check_4 (CD30007_1.D, CD30007_0.Specified_Enum_Size, "Derived_Enum");
   Check_5 (66, CD30007_0.Specified_Int_Size, "Derived_Int");
   Check_6 (CD30007_1.D1, CD30007_0.Specified_Enum_Size, "Pack_Enum");
   Check_7 (99, CD30007_0.Specified_Int_Size, "Pack_Int");
   Check_8 (CD30007_1.PE_Value, CD30007_0.Specified_Enum_Size, "Private_Enum");
   Check_9 (CD30007_1.PI_Value, CD30007_0.Specified_Int_Size, "Private_Int");

   if CD30007_1.Derived_Enum'Size /= Minimum_Enum_Size then
      Report.Failed ("Derived_Enum'Size should not be different than" &
                     Integer'Image(Minimum_Enum_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Derived_Enum'Size));
   end if;

   if CD30007_1.Derived_Int'Size /= Minimum_Int_Size then
      Report.Failed ("Derived_Int'Size should not be different than" &
                     Integer'Image(Minimum_Int_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Derived_Int'Size));
   end if;

   if CD30007_1.Pack_Enum'Size /= Minimum_Enum_Size then
      Report.Failed ("Pack_Enum'Size should not be different than" &
                     Integer'Image(Minimum_Enum_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Pack_Enum'Size));
   end if;

   if CD30007_1.Pack_Int'Size /= Minimum_Int_Size then
      Report.Failed ("Pack_Int'Size should not be different than" &
                     Integer'Image(Minimum_Int_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Derived_Int'Size));
   end if;

   if CD30007_1.Private_Enum'Size /= Minimum_Enum_Size then
      Report.Failed ("Private_Enum'Size should not be different than" &
                     Integer'Image(Minimum_Enum_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Private_Enum'Size));
   end if;

   if CD30007_1.Private_Int'Size /= Minimum_Int_Size then
      Report.Failed ("Private_Int'Size should not be different than" &
                     Integer'Image(Minimum_Int_Size) & ". Actual Size is" &
                     Integer'Image(CD30007_1.Private_Int'Size));
   end if;

   Report.Result;

end CD30007;


; Options for AVR 8-bit microcontrollers.

; Copyright (C) 2005-2025 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

mlra
Target Var(avropt_lra_p) UInteger Init(0) Optimization Undocumented
Usa LRA for reload instead of the old reload framework.  This option is experimental, and it may be removed in future versions of the compiler.

mcall-prologues
Target Mask(CALL_PROLOGUES) Optimization
Optimization. Use subroutines for function prologues and epilogues.

mcvt
Target Mask(CVT)
Use a startup code with a compact vector table.

mmcu=
Target RejectNegative Joined Var(avropt_mmcu) MissingArgError(missing device or architecture after %qs)
-mmcu=<MCU>	Select the target MCU.

mgas-isr-prologues
Target Var(avropt_gasisr_prologues) UInteger Init(0) Optimization
Optimization. Allow usage of __gcc_isr pseudo instructions in ISR prologues and epilogues.

mn-flash=
Target RejectNegative Joined Var(avropt_n_flash) UInteger Init(-1)
This option is used internally. Set the number of 64 KiB flash segments.

mcall-main
Target Var(avropt_call_main) UInteger Init(1)
Call main and exit (default).

mskip-bug
Target Mask(SKIP_BUG)
This option is used internally. Indicate presence of a processor erratum.  Do not skip 32-bit instructions.

mrmw
Target Mask(RMW)
This option is used internally. Enable Read-Modify-Write (RMW) instructions support/use.

mdeb
Target Undocumented Mask(ALL_DEBUG)

mlog=
Target RejectNegative Joined Undocumented Var(avropt_log_details)

;; Tries to work around PR118012.
mpr118012
Target Var(avropt_pr118012) UInteger Init(1) Undocumented
This option is on per default in order to work around PR118012.

mshort-calls
Target RejectNegative Mask(SHORT_CALLS)
This option is used internally for multilib generation and selection.  Assume RJMP / RCALL can target all program memory.

mint8
Target Mask(INT8)
Use an 8-bit 'int' type.

mno-interrupts
Target RejectNegative Mask(NO_INTERRUPTS)
Change the stack pointer without disabling interrupts.

mbranch-cost=
Target Joined RejectNegative UInteger Var(avropt_branch_cost) Init(0) Optimization
-mbranch-cost=<cost>	Optimization. Set the branch costs for conditional branch instructions.  Reasonable values are small, non-negative integers.  The default branch cost is 0.

mmain-is-OS_task
Target Mask(MAIN_IS_OS_TASK) Optimization
Optimization. Treat main as if it had attribute OS_task.

morder1
Target Undocumented Mask(ORDER_1)

morder2
Target Undocumented Mask(ORDER_2)

mtiny-stack
Target Mask(TINY_STACK)
Change only the low 8 bits of the stack pointer.

mrelax
Target Optimization
Optimization. Relax branches.

mpmem-wrap-around
Target
Make the linker relaxation machine assume that a program counter wrap-around occurs.

maccumulate-args
Target Mask(ACCUMULATE_OUTGOING_ARGS) Optimization
Optimization. Accumulate outgoing function arguments and acquire/release the needed stack space for outgoing function arguments in function prologue/epilogue.  Without this option, outgoing arguments are pushed before calling a function and popped afterwards.  This option can lead to reduced code size for functions that call many functions that get their arguments on the stack like, for example printf.

msplit-bit-shift
Target Var(avropt_split_bit_shift) Init(0) Optimization
Optimization. Split shifts of 4-byte values into a byte shift and a residual bit shift.

msplit-ldst
Target Var(avropt_split_ldst) Init(0) Optimization
Optimization. Split most of the load and store instructions into byte load and stores.

mstrict-X
Target Var(avropt_strict_X) Init(0) Optimization
Optimization. When accessing RAM, use X as imposed by the hardware, i.e. just use pre-decrement, post-increment and indirect addressing with the X register.  Without this option, the compiler may assume that there is an addressing mode X+const similar to Y+const and Z+const and emit instructions to emulate such an addressing mode for X.

mflmap
Target Var(avropt_flmap) Init(0)
This option is used internally. The device has the bitfield NVMCTRL_CTRLB.FLMAP.

mrodata-in-ram
Target Var(avropt_rodata_in_ram) Init(-1)
The device has the .rodata section located in the RAM area.

;; For rationale behind -msp8 see explanation in avr.h.
msp8
Target RejectNegative Var(avropt_sp8) Init(0)
This option is used internally for multilib generation and selection. The device has no SPH special function register.

mfuse-add
Target Alias(mfuse-add=, 2, 0) Optimization
Optimization. Split register additions from load/store instructions. Most useful on Reduced Tiny.

mfuse-add=
Target Joined RejectNegative UInteger Var(avropt_fuse_add) Init(0) Optimization IntegerRange(0, 3)
-mfuse-add=<0,2>	Optimization. Split register additions from load/store instructions. Most useful on Reduced Tiny.

Waddr-space-convert
Warning C Var(avropt_warn_addr_space_convert) Init(0)
Warn if the address space of an address is changed.

Wmisspelled-isr
Warning C C++ Var(avropt_warn_misspelled_isr) Init(1)
Warn if the ISR is misspelled, i.e. without __vector prefix. Enabled by default.

mfract-convert-truncate
Target Mask(FRACT_CONV_TRUNC)
Allow to use truncation instead of rounding towards zero for fractional fixed-point types.

mfuse-move
Target Alias(mfuse-move=, 23, 0) Optimization
Optimization. Run a post-reload pass that tweaks move instructions.

mfuse-move=
Target Joined RejectNegative UInteger Var(avropt_fuse_move) Init(0) Optimization IntegerRange(0, 23)
-mfuse-move=<0,23>	Optimization. Run a post-reload pass that tweaks move instructions.

mabsdata
Target Mask(ABSDATA)
Assume that all data in static storage can be accessed by LDS / STS instructions.  This option is only useful for reduced Tiny devices like ATtiny40.

mdouble=
Target Joined RejectNegative Var(avropt_double) Init(0) Enum(avropt_bits_e) Save
-mdouble=<BITS>	Use <BITS> bits wide double type.

mlong-double=
Target Joined RejectNegative Var(avropt_long_double) Init(0) Enum(avropt_bits_e) Save
-mlong-double=<BITS>	Use <BITS> bits wide long double type.

nodevicelib
Driver Target RejectNegative
Do not link against the device-specific library lib<MCU>.a.

nodevicespecs
Driver Target RejectNegative
Do not use the device-specific specs file device-specs/specs-<MCU>.

Enum
Name(avropt_bits_e) Type(int)
Available BITS selections:

EnumValue
Enum(avropt_bits_e) String(32)  Value(32)

EnumValue
Enum(avropt_bits_e) String(64) Value(64)

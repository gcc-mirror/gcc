/* Copyright (C) 2012-2018 Free Software Foundation, Inc.
   Contributed by ARM Ltd.

   This file is part of GCC.

   GCC is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GCC is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GCC; see the file COPYING3.  If not see
   <http://www.gnu.org/licenses/>.  */

/* This is a list of ISA extentsions in AArch64.

   Before using #include to read this file, define a macro:

      AARCH64_OPT_EXTENSION(EXT_NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, FEATURE_STRING)

   EXT_NAME is the name of the extension, represented as a string constant.
   FLAGS_CANONICAL is the canonical internal name for this flag.
   FLAGS_ON are the bitwise-or of the features that enabling the extension
   adds, or zero if enabling this extension has no effect on other features.
   FLAGS_OFF are the bitwise-or of the features that disabling the extension
   removes, or zero if disabling this extension has no effect on other
   features.
   FEAT_STRING is a string containing the entries in the 'Features' field of
   /proc/cpuinfo on a GNU/Linux system that correspond to this architecture
   extension being available.  Sometimes multiple entries are needed to enable
   the extension (for example, the 'crypto' extension depends on four
   entries: aes, pmull, sha1, sha2 being present).  In that case this field
   should contain a space (" ") separated list of the strings in 'Features'
   that are required.  Their order is not important.  */

/* Enabling "fp" just enables "fp".
   Disabling "fp" also disables "simd", "crypto", "fp16", "aes", "sha2",
   "sha3", sm3/sm4 and "sve".  */
AARCH64_OPT_EXTENSION("fp", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO |\
		      AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 |\
		      AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, "fp")

/* Enabling "simd" also enables "fp".
   Disabling "simd" also disables "crypto", "dotprod", "aes", "sha2", "sha3",
   "sm3/sm4" and "sve".  */
AARCH64_OPT_EXTENSION("simd", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO |\
		      AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 |\
		      AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE,
		      "asimd")

/* Enabling "crypto" also enables "fp" and "simd".
   Disabling "crypto" disables "crypto", "aes", "sha2", "sha3" and "sm3/sm4".  */
AARCH64_OPT_EXTENSION("crypto", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD,\
		      AARCH64_FL_AES | AARCH64_FL_SHA2 |AARCH64_FL_SHA3 | AARCH64_FL_SM4,\
		      "aes pmull sha1 sha2")

/* Enabling or disabling "crc" only changes "crc".  */
AARCH64_OPT_EXTENSION("crc", AARCH64_FL_CRC, 0, 0, "crc32")

/* Enabling or disabling "lse" only changes "lse".  */
AARCH64_OPT_EXTENSION("lse", AARCH64_FL_LSE, 0, 0, "atomics")

/* Enabling "fp16" also enables "fp".
   Disabling "fp16" disables "fp16", "fp16fml" and "sve".  */
AARCH64_OPT_EXTENSION("fp16", AARCH64_FL_F16, AARCH64_FL_FP,
		      AARCH64_FL_F16FML | AARCH64_FL_SVE, "fphp asimdhp")

/* Enabling or disabling "rcpc" only changes "rcpc".  */
AARCH64_OPT_EXTENSION("rcpc", AARCH64_FL_RCPC, 0, 0, "lrcpc")

/* Enabling "rdma" also enables "fp", "simd".
   Disabling "rdma" just disables "rdma".  */
AARCH64_OPT_EXTENSION("rdma", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, "asimdrdm")

/* Enabling "dotprod" also enables "simd".
   Disabling "dotprod" only disables "dotprod".  */
AARCH64_OPT_EXTENSION("dotprod", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, "asimddp")

/* Enabling "aes" also enables "simd".
   Disabling "aes" just disables "aes".  */
AARCH64_OPT_EXTENSION("aes", AARCH64_FL_AES, AARCH64_FL_SIMD, 0, "aes")

/* Enabling "sha2" also enables "simd".
   Disabling "sha2" just disables "sha2".  */
AARCH64_OPT_EXTENSION("sha2", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, "sha1 sha2")

/* Enabling "sha3" enables "simd" and "sha2".
   Disabling "sha3" just disables "sha3".  */
AARCH64_OPT_EXTENSION("sha3", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, 0, "sha3 sha512")

/* Enabling "sm4" also enables "simd".
   Disabling "sm4" just disables "sm4".  */
AARCH64_OPT_EXTENSION("sm4", AARCH64_FL_SM4, AARCH64_FL_SIMD, 0, "sm3 sm4")

/* Enabling "fp16fml" also enables "fp" and "fp16".
   Disabling "fp16fml" just disables "fp16fml".  */
AARCH64_OPT_EXTENSION("fp16fml", AARCH64_FL_F16FML, AARCH64_FL_FP | AARCH64_FL_F16, 0, "asimdfml")

/* Enabling "sve" also enables "fp16", "fp" and "simd".
   Disabling "sve" just disables "sve".  */
AARCH64_OPT_EXTENSION("sve", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, 0, "sve")

/* Enabling/Disabling "profile" does not enable/disable any other feature.  */
AARCH64_OPT_EXTENSION("profile", AARCH64_FL_PROFILE, 0, 0, "")

#undef AARCH64_OPT_EXTENSION
